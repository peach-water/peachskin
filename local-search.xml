<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>N体问题</title>
    <link href="/peachskin/2021/05/05/N%E4%BD%93%E9%97%AE%E9%A2%98/"/>
    <url>/peachskin/2021/05/05/N%E4%BD%93%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><center><font size='8'>N体问题模拟</font></center></p><p><center><font size='0'>串行和并行方案</font></center></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　模拟一个太空中有N个星体，各个星体有三个维度的速度和位置，相互之间受到万有引力影响运动的效果。模拟最小时间分位点为0.005秒，本题目中万有引力常数设定为1，星体的初始数据在“nbody.txt”文本文件中。要求用单线程和多线程分别完成一份，将迭代20次后的数据输出到文件中，并且比较串行程序和多线程之间的计算结果差异。<a href="https://easyhpc.net/course/106">超算习堂期中测验</a>。</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>　　模拟方案涉及大量计算，对于算法的考察较小，主要是对数据结构和计算方式设计考验，以及对与多线程openmp和pthread的运用。</p><h2 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h2><p>　　一个txt文件，其中包括1024个星体的7项数据，一行为一个星体，分别是星体质量，星体在x、y、z上的位置，星体在x、y、z上的速度。</p><ul><li>实验环境：ubuntu20.04（Hype-V）</li><li>编译器版本：g++ 9.3.0<h2 id="星体数据存储"><a href="#星体数据存储" class="headerlink" title="星体数据存储"></a>星体数据存储</h2>　　对于一个星体需要存放的数据有如下，主要是x、y、z空间位置，sx、sy、sz速度和mass星体质量，还有计算时一些临时变量，如计算1号星体和其他星体相互作用力总和的变量，引入这个变量还有一个作用，可以减少误差（主要是指除法的误差累积）。星体结构体数据如下：</li></ul><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">planet</span> // 星体结构体</span><span class="hljs-class">&#123;</span><span class="hljs-keyword">double</span> mass;<span class="hljs-comment">// body质量</span><span class="hljs-keyword">double</span> sx, sy, sz;<span class="hljs-comment">// body三维方向上的速度</span><span class="hljs-keyword">double</span> x, y, z;<span class="hljs-comment">// body三维方向上的位置</span><span class="hljs-keyword">double</span> fx, fy, fz;<span class="hljs-comment">// body三维方向上收到的力的总和</span>planet()<span class="hljs-comment">// 把所有数据初始化为0</span>&#123;mass = sx = sy = sz = x = y = z = <span class="hljs-number">0</span>;fx = fy = fz = <span class="hljs-number">0</span>;&#125;&#125;;</code></pre><h2 id="计算合力"><a href="#计算合力" class="headerlink" title="计算合力"></a>计算合力</h2><p>　　计算一个星体收到其他星体力的总和，无非两两之间计算力然后更新。例如1号星体和2号星体、1号和3号、1号和4号……1号和1024号，2号和3号、2号和4号……等等（注意，这里并不需要求2号和1号，因为在计算1号和2号时已经计算了力大小，只需要取反），因为这个模块也会在后来的多线程中被调用，因此抽象成为一个单独的函数。为了减小误差，将每次计算的力存放到临时变量中，并且在更新完所有的合力之后，更新星体的速度和位置。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speed_change</span><span class="hljs-params">(planet &amp;a, planet &amp;b)</span></span>&#123;...&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">series_stimulus</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count, planet *<span class="hljs-built_in">array</span>)</span><span class="hljs-comment">// 单线程模块，count表示迭代多少次，array是计算使用的元数据。</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">while</span> (count--)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; max_size; j++)&#123;speed_change(<span class="hljs-built_in">array</span>[i], <span class="hljs-built_in">array</span>[j]);&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;postion(<span class="hljs-built_in">array</span>[i]);&#125;&#125;&#125;</code></pre><h2 id="多线程？！"><a href="#多线程？！" class="headerlink" title="多线程？！"></a>多线程？！</h2><h3 id="openmp"><a href="#openmp" class="headerlink" title="openmp"></a>openmp</h3><p>　　有了上面单线程的计算方法，多线程就是把单线程的for，while等循环体并行化而已，openmp！！！简直没有比这个更加快捷的方法。逐个讲解pragma omp parallel带的参数。</p><ul><li>for : 表明并行化循环</li><li>num_threads(n) : 并行线程数量，n可以是任意整数，其实还是看配置</li><li>private(a,b,…,z) : 表明哪些变量是私有变量，不同线程之间不会相互干扰</li><li>shared(a,b,…,z) : 表明哪些变量是公有变量，不同线程之间共享，例如本题中星体数据就是共享的，并且能够更新</li></ul><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parallel_stimulus1</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count, planet *<span class="hljs-built_in">array</span>)</span><span class="hljs-comment">// openmp骞惰绋嬪簭</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i, j;<span class="hljs-keyword">while</span> (count--)&#123;<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(4) private(i, j) shared(array)</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;<span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; max_size; j++)&#123;speed_change(<span class="hljs-built_in">array</span>[i], <span class="hljs-built_in">array</span>[j]);&#125;&#125;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;postion(<span class="hljs-built_in">array</span>[i]);&#125;&#125;&#125;</code></pre><p>　　当然编译带有openmp的cpp文件需要在编译指令加入 -fopenmp 的参数，比如说你的文件叫做“a.cpp”那么编译参数就是<br><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> g++ a.cpp -o a.out -fopenmp</span></code></pre></p><h3 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h3><p>　　如果说上面的openmp是自动多线程，那么pthread就是手动多线程。使用pthread创建新线程之前必须要为新线程分配空间，thread_handle就是这样一个容纳新线程的容器，然后使用new为它分配空间（这里因为笔者笔记本只有4个核心，因此只创建4线程）。有了容器之后要装东西，不然一个空的线程容器有什么用呢。调用pthread_create函数创建新线程：</p><ul><li>第一个参数是容器位置（也就是我们希望把这个新线程放在容器哪个位置）</li><li>第二个参数在这里没有用指定为NULL</li><li>第三个参数是函数指针（即希望在这个容器内运行什么），必须是void*类型</li><li>第四个参数是给函数使用的参数（这个容器内的函数总不可能完成无米之炊吧，所以米在哪里在这个位置告诉它）</li></ul><p>　　pthread不会帮我们实现线程同步，所以需要手动实现线程同步。这里使用pthread_join函数，将之前创建的多个线程合并，然后统一更新星体的速度和位置。<br><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parallel_stimulus2</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count, planet *<span class="hljs-built_in">array</span>)</span><span class="hljs-comment">// pthread主线程函数</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> num_of_thread = <span class="hljs-number">4</span>;thread_set *<span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> thread_set[num_of_thread];<span class="hljs-keyword">pthread_t</span> *thread_handle = <span class="hljs-keyword">new</span> <span class="hljs-keyword">pthread_t</span>[num_of_thread];<span class="hljs-keyword">while</span> (count--)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; num_of_thread; i++)&#123;<span class="hljs-built_in">set</span>[i].rank = i;<span class="hljs-built_in">set</span>[i].o = <span class="hljs-built_in">array</span>;pthread_create(&amp;thread_handle[i], <span class="hljs-literal">nullptr</span>, thread_pthread, (<span class="hljs-keyword">void</span> *)&amp;<span class="hljs-built_in">set</span>[i]);&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = num_of_thread<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;pthread_join(thread_handle[i], <span class="hljs-literal">nullptr</span>);&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;postion(<span class="hljs-built_in">array</span>[i]);&#125;&#125;<span class="hljs-keyword">delete</span>[] thread_handle;<span class="hljs-keyword">delete</span>[] <span class="hljs-built_in">set</span>;<span class="hljs-keyword">return</span>;&#125;</code></pre><br>　　然后是容器内容物要怎么办，因为要手动并行化，所以这个线程做什么也需要自己计算。本处举个🌰是4线程，每个线程计算1024个星体的四分之一。为了传递参数方便，使用结构体thread_set，其一是方便、其二是因为pthread_create第四个参数是一个指针（而不是一个指针的指针），不能传递多个参数。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">thread_set</span> // <span class="hljs-title">pthread</span>参数表</span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> rank;<span class="hljs-comment">// 指定的线程号</span>planet *o;<span class="hljs-comment">// 计算的元数据</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">thread_pthread</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *argv)</span><span class="hljs-comment">// pthread子线程函数</span></span><span class="hljs-function"></span>&#123;thread_set <span class="hljs-built_in">set</span> = *(thread_set *)argv;<span class="hljs-keyword">long</span> rank = <span class="hljs-built_in">set</span>.rank;<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (rank == <span class="hljs-number">3</span>)&#123;n = max_size - <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;n = (rank + <span class="hljs-number">1</span>) * max_size / <span class="hljs-number">4</span>;<span class="hljs-comment">// 如果修改线程数，这里一并修改。</span>&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = rank * max_size / <span class="hljs-number">4</span>; i &lt; n; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= max_size; j++)&#123;speed_change(<span class="hljs-built_in">set</span>.o[i], <span class="hljs-built_in">set</span>.o[j]);&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;&#125;</code></pre><p>　　为了能够使用pthread，需要在编译参数上增加“-lpthread”是“l”不是“i”。🌰同上。<br><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> g++ a.cpp -o a.out -lpthread</span></code></pre></p><h1 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h1><p>　　上面说了，需要从文件中读入计算数据，然后将迭代结果输出到文件。此处比较推荐的是ofstream头文件提供的文件流功能。能够像cout、cin一样使用。</p><h2 id="文件读入"><a href="#文件读入" class="headerlink" title="文件读入"></a>文件读入</h2><p>　　使用前建立一个fstream文件流指针，调用open方法打开需要读入的文件。然后像使用cin一样使用fp即可。</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(planet *<span class="hljs-built_in">array</span>)</span></span><span class="hljs-function"></span>&#123;fstream fp;fp.open(<span class="hljs-string">&quot;nbody.txt&quot;</span>, ios::in);<span class="hljs-keyword">if</span> (fp.bad())<span class="hljs-comment">// 检查文件是否存在</span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;error to open file&quot;</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;fp &gt;&gt; <span class="hljs-built_in">array</span>[i].mass &gt;&gt; <span class="hljs-built_in">array</span>[i].x &gt;&gt; <span class="hljs-built_in">array</span>[i].y &gt;&gt; <span class="hljs-built_in">array</span>[i].z &gt;&gt; <span class="hljs-built_in">array</span>[i].sx &gt;&gt; <span class="hljs-built_in">array</span>[i].sy &gt;&gt; <span class="hljs-built_in">array</span>[i].sz;&#125;fp.close();<span class="hljs-comment">// 读写结束后关闭文件</span>&#125;</code></pre><h2 id="文件写出"><a href="#文件写出" class="headerlink" title="文件写出"></a>文件写出</h2><p>　　一样，fstream也可以像cout一样使用，向文件写内容。<br><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(planet *<span class="hljs-built_in">array</span>, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *file)</span></span><span class="hljs-function"></span>&#123;fstream fp;fp.open(file, ios::out);<span class="hljs-keyword">if</span> (fp.bad())&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;output open error&quot;</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max_size; i++)&#123;fp &lt;&lt; setprecision(<span class="hljs-number">15</span>) &lt;&lt; setiosflags(ios::left) &lt;&lt; <span class="hljs-built_in">array</span>[i].mass &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">array</span>[i].x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>   &lt;&lt; <span class="hljs-built_in">array</span>[i].y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">array</span>[i].z &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>   &lt;&lt; <span class="hljs-built_in">array</span>[i].sx &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">array</span>[i].sy &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">array</span>[i].sz &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;fp.close();&#125;</code></pre></p><h1 id="一个简短的main"><a href="#一个简短的main" class="headerlink" title="一个简短的main"></a>一个简短的main</h1><p>　　其实main也做不了什么，也就是调用上面写好的函数，加上一个计时器<br><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">double</span> start, end;planet <span class="hljs-built_in">array</span>[max_size + <span class="hljs-number">16</span>];planet copy_planet[max_size + <span class="hljs-number">16</span>];read(<span class="hljs-built_in">array</span>);<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">20</span>; <span class="hljs-comment">//迭代20次</span><span class="hljs-keyword">char</span> series[] = <span class="hljs-string">&quot;series version.txt&quot;</span>, parallel1[] = <span class="hljs-string">&quot;parallel version1.txt&quot;</span>, parallel2[] = <span class="hljs-string">&quot;parallel version2.txt&quot;</span>;<span class="hljs-comment">// 输出文件名</span><span class="hljs-built_in">memcpy</span>(copy_planet, <span class="hljs-built_in">array</span>, max_size * <span class="hljs-keyword">sizeof</span>(planet)); <span class="hljs-comment">// 串行程序</span>GET_TIME(start);series_stimulus(count, copy_planet);GET_TIME(end)<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">double</span>)(end - start) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// 要写出如文件请去掉本行注释，下面同理</span><span class="hljs-comment">// write(copy_planet, series);</span><span class="hljs-built_in">memcpy</span>(copy_planet, <span class="hljs-built_in">array</span>, max_size * <span class="hljs-keyword">sizeof</span>(planet)); <span class="hljs-comment">// openmp程序</span>GET_TIME(start);parallel_stimulus1(count, copy_planet);GET_TIME(end)<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">double</span>)(end - start) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// write(copy_planet, parallel1);</span><span class="hljs-built_in">memcpy</span>(copy_planet, <span class="hljs-built_in">array</span>, max_size * <span class="hljs-keyword">sizeof</span>(planet)); <span class="hljs-comment">// pthread程序</span>GET_TIME(start);parallel_stimulus2(count, copy_planet);GET_TIME(end)<span class="hljs-built_in">cout</span> &lt;&lt; (<span class="hljs-keyword">double</span>)(end - start) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">// write(copy_planet, parallel2);</span>&#125;</code></pre></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　总体来说，本次作业还是较为简单的。本博客并没有放出speed_change()函数源码，因为在实现过程中发现和提供的标准答案的方向完全相反。和预计写法不同。同样的还有position()源码，这个函数十分简单，就是根据当前速度更新位置，当前受力情况更新速度，本处不再提供。完整实现代码可以从这里<a href="https://github.com/peach-water/nbody_problem">获得</a></p>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>超级计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>make laughing</title>
    <link href="/peachskin/2021/04/11/make-laughing/"/>
    <url>/peachskin/2021/04/11/make-laughing/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>记录一些笑话</font></center><center><font size='0'>始建于2021年4月11日</font></center><h1 id="哈，鸽子"><a href="#哈，鸽子" class="headerlink" title="哈，鸽子"></a>哈，鸽子</h1><p>　　最开始的图<br><img src="http://img.yuko.buzz/images/2021/04/11/1618153061860.png" alt="1618153061860.png"></p><h2 id="芜湖、起飞"><a href="#芜湖、起飞" class="headerlink" title="芜湖、起飞"></a>芜湖、起飞</h2><p>　　当你乱写的程序它却碰巧完成了任务。来自Bilibili。恰好趁着这个机会，把之前零零散散的笑话都整理一下。</p><p>　　首先是这个视频：</p><center><iframe src="//player.bilibili.com/player.html?aid=757297242&bvid=BV1w64y1Q7sk&cid=315369624&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height='480' width='640'> </iframe></center><h2 id="一个段子"><a href="#一个段子" class="headerlink" title="一个段子"></a>一个段子</h2><p>　　虽然不知道这只鸟为什么可以用头飞起来，但是总归是实现了功能。<br>　　等等、既然是用头飞的，那去掉翅膀应该没事。<br>　　凭什么去掉翅膀就不能飞了？你TM不是用头飞的！<br>　　凭什么把翅膀原封不动的放回去又不能飞了？我不是啥也没干啊？<br>　　艹！为什么这只鸟会用脚飞行，这是什么原理？我把脚去掉试试。<br>　　绝了，这鸟又能飞了！！而且正常的用翅膀飞行，虽然没有脚不能着陆。<br>　　等等，我上次好像做了一只鹰来着，把那个脚复制过来看看！<br>　　<br>　　完美，现在这只鸽子又完美的飞行功能，并且可以正常的着陆，虽然脚是用鹰的脚凑合的，但是没问题！能用！我宣布！这个项目完工。♥</p><h2 id="又是一个段子"><a href="#又是一个段子" class="headerlink" title="又是一个段子"></a>又是一个段子</h2><p>　　是鸽子吗？<br>　　是！<br>　　能飞吗？<br>　　可以！<br>　　那不就完了😀</p><h2 id="一个生动形象的段子"><a href="#一个生动形象的段子" class="headerlink" title="一个生动形象的段子"></a>一个生动形象的段子</h2><p>　　你使用字典垫桌角，你走后下来一个人发现这个桌子需要使用字典，但是桌子并没有文字交互功能，而且桌子是不需要文字查询的。于是他把字典一抽，桌子翻了，菜撒了一地。但是他永远搞不懂为什么桌子要查字典。😀<br>　　然后他修理了一整天的BUG，研究桌子上的饭菜摆放位置对于桌子翻倒的影响，最后发现，只需要把一盘菜垫在桌角就可以了，然后潇洒离去，告诉别人今天他修了一个大BUG。后来又来了一个人检查这张桌子，他认为这张桌子不需要吃菜，于是把盘子抽了出来……把字典塞了回去。</p><h2 id="讲道理"><a href="#讲道理" class="headerlink" title="讲道理"></a>讲道理</h2><p>　　如果你的鸽子这样子飞成功了，那么很有可能接下来的半个班都会这么飞，然后生出一些四条腿，三只翅膀的奇怪各自😀，另外半个班级可能造不出鸽子。</p><h1 id="一个酒吧的故事"><a href="#一个酒吧的故事" class="headerlink" title="一个酒吧的故事"></a>一个酒吧的故事</h1><p>　　一个测试工程师走进一家酒吧，要了一杯啤酒。<br>　　一个测试工程师走进一家酒吧，要了一杯咖啡。<br>　　一个测试工程师走进一家酒吧，要了0.7杯啤酒。<br>　　一个测试工程师走进一家酒吧，要了-1杯啤酒。<br>　　一个测试工程师走进一家酒吧，要了2^32杯啤酒。<br>　　一个测试工程师走进一家酒吧，要了一杯洗脚水。<br>　　一个测试工程师走进一家酒吧，要了一杯蜥蜴。<br>　　一个测试工程师走进一家酒吧，要了一份asdfQwer@24多个！&amp;（@。<br>　　一个测试工程师走进一家酒吧，什么也没要。<br>　　一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去又从下水道进来。<br>　　一个测试工程师走进一家酒吧，又走出去又走进来又出去又进来又出去，最后在外面把老板打了一顿。<br>　　一个测试工程师走进一<br>　　一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷。<br>　　一个测试工程师走进一家酒吧，要了NaN杯Null。<br>　　一Ｔ测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶。<br>　　一Ｔ测试工程师把酒吧拆了。<br>　　一个测试工程师换装成老板，要了500杯啤酒并且不付钱。<br>　　一万个测试工程师在酒吧门前呼啸而过。<br>　　一个测试工程师走进一家酒吧，要了一杯啤酒‘；DROP TABLE酒吧。<br>　　测试工程师们满意的离开了酒吧。<br>　　一名顾客点了一份炒饭，酒吧炸了。</p><h1 id="一些短合集"><a href="#一些短合集" class="headerlink" title="一些短合集"></a>一些短合集</h1><h2 id="乱码打油诗"><a href="#乱码打油诗" class="headerlink" title="乱码打油诗"></a>乱码打油诗</h2><p>　　手持两把锟斤拷，口中疾呼烫烫烫。<br>　　脚踏千朵屯屯屯，笑看万物诺诺诺。</p><h2 id="客户多样性"><a href="#客户多样性" class="headerlink" title="客户多样性"></a>客户多样性</h2><p>　　我以为的玩家：<br>　　老老实实打怪。老老实实刷怪。老老实实探险<br>　　实际上的玩家：<br>　　这个怪物中间有条缝。欸！我蹭到宝箱了。<br>　　我把这个怪物带到村庄会怎么样。<br>　　我拿到宝箱的时候立刻关了游戏然后换一个上线是不是就可以白嫖一份。<br>　　……</p><h2 id="Jeff-Dean"><a href="#Jeff-Dean" class="headerlink" title="Jeff Dean"></a>Jeff Dean</h2><ul><li>代码作为文档使用，提交的只有二进制文件</li><li>键盘只有0和1</li><li>提交前会验证性的编译一次</li><li>编译期间会警告编译器，而不是编译器给出警告</li><li>顺便检查编译器有没有Bug</li><li>每天打开邮箱，检查今天请求gcc -O4优化的代码</li><li>精力有限，所以算法通常优化到O(1/n)</li><li>仅有的失手是旅行商问题，优化到O(n^2)</li><li>被迫使用异步API，因为优化过的函数会在被调用前返回</li><li><p>偶尔手动接管Google挂掉的服务器，期间用户满意度翻倍</p><h2 id="程序员的读书历程"><a href="#程序员的读书历程" class="headerlink" title="程序员的读书历程"></a>程序员的读书历程</h2><p>　　x语言入门-&gt;x语言应用实践-&gt;x语言高级编程-&gt;x语言的科学与艺术-&gt;编程之美-&gt;编程之道-&gt;编程之禅-&gt;颈椎病康复指南。</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>　　还没上大学的时候，高三暑假，跑到家那边的图书馆想买传说中的C++的书，然后看到一本C#，我一看，嘿，这个++写的还挺有艺术的，重叠起来了，于是把C#买了回来……</p></li></ul><h2 id="《桃花庵》"><a href="#《桃花庵》" class="headerlink" title="《桃花庵》"></a>《桃花庵》</h2><p>　　写字楼里写字间，写字间种程序员；程序人员写程序，又将程序换酒钱；酒醒只在屏前坐，酒醉还来屏下眠；酒醉酒醒日复日，屏前屏下年复年；但愿老死电脑间，不愿鞠躬老板前；奔驰宝马贵者趣，公交自行程序员；别人笑我太疯癫，我笑自己命太贱；但见满街漂亮妹，哪个归的程序员。</p><h2 id="对联"><a href="#对联" class="headerlink" title="对联"></a>对联</h2><ul><li>上联：MYSQL明月三千里</li><li>下联：XHTML信号他妈烂</li></ul><h2 id="传奇的作家"><a href="#传奇的作家" class="headerlink" title="传奇的作家"></a>传奇的作家</h2><p>　　传说有一位老外立志要当一位伟大的作家，什么时伟大的作家？他说：“我写的东西全世界都看得到！看完他们必定会歇斯底里！会火冒三丈！会痛苦万分！结果，他，成功了，他在微软公司负责写操作系统蓝屏时的报错提示信息。</p><h2 id="潜规则"><a href="#潜规则" class="headerlink" title="潜规则"></a>潜规则</h2><ul><li>了解=听过名字</li><li>熟悉=知道是啥</li><li>熟练=用过</li><li>精通=做过东西</li></ul><h1 id="程序员对BUG反应"><a href="#程序员对BUG反应" class="headerlink" title="程序员对BUG反应"></a>程序员对BUG反应</h1><h2 id="直接回答（怼）"><a href="#直接回答（怼）" class="headerlink" title="直接回答（怼）"></a>直接回答（怼）</h2><ul><li>1、绝对不可能；</li><li>2、在我这里是好的，不行你过来看；</li><li>3、真是奇怪，刚才还是好好的；</li><li>4、你清理下缓存试试；</li><li>5、重启电脑试试；</li><li>6、你用的什么版本的库？</li><li>7、尼玛怎么还在使用某某安全浏览器<h2 id="报BUG的礼仪"><a href="#报BUG的礼仪" class="headerlink" title="报BUG的礼仪"></a>报BUG的礼仪</h2></li><li>不要对一个程序员直接说：你的BUG有代码。不然第一反应是：1、一定是你的环境有问题；2、sb你会用吗？</li></ul><ul><li>如果委婉的说：你的程序和我预期的有点不一致，你看看是不是我的使用方法有问题（走程序员的路让程序员无路可走）</li><li>他就会本能的想：是不是出BUG了。<h2 id="程序员的核心竞争力是什么？为什么？"><a href="#程序员的核心竞争力是什么？为什么？" class="headerlink" title="程序员的核心竞争力是什么？为什么？"></a>程序员的核心竞争力是什么？为什么？</h2></li><li>“玩算法的码农，打拼靠蓝条，像是法师。数学就等于蓝条最大值，数学差，魔法值不高，很快就到瓶颈了。外语影响回蓝速度。经验和智力加急速和穿透。不玩算法的码农，像是战士，打拼靠血条、体制加生命，精神加生命恢复，经验和敏捷加急速和破甲。”<h2 id="那些老鸟程序员直到而新手程序员不知道的小技巧？"><a href="#那些老鸟程序员直到而新手程序员不知道的小技巧？" class="headerlink" title="那些老鸟程序员直到而新手程序员不知道的小技巧？"></a>那些老鸟程序员直到而新手程序员不知道的小技巧？</h2></li><li>程序不等于数据结构加算法，而等于搜索引擎加英语。</li></ul><h1 id="当代孔乙己"><a href="#当代孔乙己" class="headerlink" title="当代孔乙己"></a>当代孔乙己</h1><p>互联网的格局，是和别处不同的：都是格子衫，稀疏的头发，双肩包，男。</p><p>写代码的人，傍午傍晚散了工，每每三俩人，背着手，沿着软件园溜啦一圈。</p><p>倘若肯花点钱，便还会走到星巴克，买一杯咖啡，那样便再能多模几分钟的🐟。</p><p>我从十九岁起，便在软件园打工，老板说，看着还算清秀，就让我去收银。</p><p>我从此便成为了收银员。</p><p>老板是一副凶面孔，顾客们说话也很小声，教人活泼不得。</p><p>只有孔乙己到店，才可以笑几声，所以才记得。</p><p>孔乙己是穿着格子衫，背着双肩包，头发已经几乎没有的人。</p><p>他身材高大，青白脸色，皱纹间时常夹些伤痕。</p><p>一部乱蓬蓬的稀疏的头发，出啊的虽是格子衫，也是又脏又破，似乎十多年没有补，也没有洗。</p><p>他对人说话，总是满口闭环、打法、倒逼、落地。</p><p>教人半懂不懂的。</p><p>因为他姓孔，别人便从描红纸上的“上大人孔乙己”这半懂不懂的话里，替他取下一个外号，叫做孔乙己。</p><p>孔乙己一到店，所有顾客便都看着他笑，有的叫道：“孔乙己，你又写了新的BUG！”</p><p>他不回答，对我说：“一杯摩卡星冰乐，中杯。”</p><p>便摸出35块零钱。</p><p>他们又故意高声嚷道，“你一定又搞出资损了！”</p><p>孔乙己睁大眼睛说，“你怎么这样凭空污人清白……”</p><p>“什么清白，我前天亲眼看见你背了故障，被老板骂。”</p><p>孔乙己便涨红了脸，额头上的青筋条条绽出，争辩道，“同时发布10个服务……10个服务！发布失败没有及时回滚……，这能算故障？”</p><p>接着便是难懂的话，什么“方法论”，什么“组合拳”之类，引得众人都哄笑起来。</p><p>店内店外充满了快活的空气。</p><p>听人家背地里谈论，孔乙己原来当过领导，但是最终还是倒闭了。</p><p>于是人到了中年，愈过愈穷，弄到将要讨饭了。</p><p>幸而代码写的还不错，便进了一家创业公司，混口饭吃。</p><p>可惜他又有一样坏脾气，便是情商不高。</p><p>经常做不到几天，便得罪老板。</p><p>如是几次，工作便难找了。</p><p>孔乙己没有法，便免不了偶然做些外包的事。</p><p>但他在这里，品行却比别人都好，就是从不拖欠。</p><p>虽然间或没有现钱，暂时记在账上，但不出一个月，定然还清，从账上拭去孔乙己的名字。</p><p>孔乙己喝过半杯咖啡，涨红的脸色渐渐复原，旁人便又问道，孔乙己，你当真当过领导吗？</p><p>孔乙己看着问他的人，显出不屑置辩的神气。</p><p>他们便接着问道，“你怎的连个二线公司也进不去呢？”</p><p>孔乙己立刻显出颓唐不安的模样，脸上笼罩了一层灰色，嘴里说些话。</p><p>这回可是全是“价值转化”，“结果导向”之类，完全听不懂了。</p><p>在这时候，众人也就哄笑起来，店内店外充满了快活的空气。</p><p>在这些时候，我可以附和着笑，老板是决不责备的。</p><p>而且老板见了孔乙己，也每每这样问他，引人发笑。</p><p>孔乙己自己知道不能和他们谈天，便只好向孩子说话。</p><p>有一回对我说道，“你看过《Java编程思想》么？”</p><p>我略略点一点头。</p><p>他说，“读过，……我便考你一考。怎么能赋能新产品？”</p><p>我想，讨饭一样的人，也配考我吗？</p><p>便回过脸去，不再理会。</p><p>孔乙己等了许久，很恳切的说到，“不会罢？……我教给你，记着！这样做，将来做领导的时候，要用。”</p><p>我暗想我还在星巴克打工，只是个收银员而已，而且我们这里也不需要程序员，更不需要领导。</p><p>又好笑，又不耐烦，懒懒的回答，“谁要你教，不就是打通信息屏障，聚焦用户感知赛道，复用打法达成持久收益，抽离透传归因分析，最后作为抓手为产品赋能吗？”</p><p>孔乙己显出极为高兴的样子，将两个指头的长指甲敲着柜台，点头说，“对呀对呀！……赋能还有4种方式，你知道么？”</p><p>我愈不耐烦了，努着嘴走远。</p><p>孔乙己刚打开电脑，先看看CSDN，见我毫不热心，便又叹一口气，显出极惋惜的样子。</p><p>有几回，旁边的孩子听得笑声，也赶热闹，围住孔乙己。</p><p>他便教他们方法论。</p><p>孩子听不懂，但是仍然不散，眼睛看着他的咖啡杯。</p><p>孔乙己着了慌，伸开五指将咖啡罩住，弯下腰去说道，“不多了，我已经不多了。”</p><p>直起身又看一看，自己摇头说，“不多不多，多乎哉！不多也。”</p><p>于是这一群孩子都在笑声里走散了。</p><p>孔乙己是这样的使人快活，可是没有他，别人也就这么过。</p><p>有一天，大约是中秋前的两三天，老板正在慢慢的算账，忽然说，“孔乙己长久没有来了。还欠十九块钱呢！”</p><p>我也才觉得他的确长久没有来了。</p><p>一个喝酒的人说到，“他怎么来？……他失业很久了。”</p><p>掌柜说，“哦！”</p><p>“他总仍旧加班。这一回，是自己发昏，竟怼到CEO头上了。他一个P5，得罪的起么？”</p><p>“后来怎么样？”</p><p>“怎么样？先写检讨，后来是通报批评，最后被辞退，连赔偿都没有。”</p><p>“后来呢？”</p><p>“怎样？……谁晓得？许是回老家了。”</p><p>老板也不再问，仍然慢慢的算他的账。</p><p>中秋之后，秋风是一天凉比一天，看看将近初冬，虽然店里整天开着空调，也须穿上棉袄了。</p><p>一天的下半天，没有一个顾客，我正合眼坐着。</p><p>忽然间听得一个声音，“一杯摩卡。”</p><p>这声音虽然低，却很耳熟。</p><p>看时又没有人，站起来向外一望，那孔乙己便在柜台下对了门槛坐着。</p><p>他脸上黑而且瘦，已经不成样子。</p><p>穿一件破棉袄，盘着两腿，下面铺了一个蒲团，用麻绳在肩上挂住。</p><p>见了我，又说道，“一杯摩卡。”</p><p>老板也伸出头去，一面说，“孔乙己么？你还欠着十九块钱呢！”</p><p>孔乙己很颓唐的仰面答道，“这……下回还清罢。这一回是现金，咖啡不要加冰。”</p><p>掌柜仍然和平常一样，笑着对他说，“孔乙己，你又骂领导课！”</p><p>但他这回却不十分分辨，单说了一句“不要取笑！”</p><p>“取笑？要是不骂人，怎么被开除了？”</p><p>孔乙己低声说道，“辞职、辞职、辞……”</p><p>他的眼色，很像恳求老板，不要再提。</p><p>此时已经聚集了几个人，便和老板都笑了。</p><p>我拿着咖啡，端出去，放在门槛上。</p><p>他从破衣口袋里摸出一些零钱，放在我手里，见他满手是灰，原来他是便用这手走来的。</p><p>不一会，又长久没有见到孔乙己。</p><p>到了年关，老板说，“孔乙己还欠着十九块钱呢！”</p><p>到了第二年的端午，又说，“孔乙己还欠十九块钱呢！”</p><p>到中秋可是没有说，再到年关也没有看见他。</p><p>我到现在终于见——大约孔乙己的确回老家了。</p><ul><li>著作权归作者所有</li><li>商业转载请联系作者获得授权，非商业转载请注明出处</li><li>作者：艾小仙：<a href="https://mp.weixin.qq.com/s?__biz=MzkzNTEwOTAxMA==&amp;mid=2247492406&amp;idx=1&amp;sn=caf091fa2220cdbc354719bf81874bf6&amp;chksm=c2b1abcbf5c622dda34c85e15994a0d1fb01c4e07b93a597757053da5185618d4c77b89dd1ac&amp;token=2030092608&amp;lang=zh_CN#rd">程序员孔乙己</a></li><li>来源：微信公众号</li></ul><h1 id="mian-or-main"><a href="#mian-or-main" class="headerlink" title="mian or main"></a>mian or main</h1><p>　　为什么我写代码时总是会手滑把main打成mian?<br><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><span class="hljs-keyword">void</span> 左手()&#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;a&#x27;</span>);&#125;<span class="hljs-keyword">void</span> 右手()&#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;m&#x27;</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;i&#x27;</span>);<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;n&#x27;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">std</span>::thread 左手线程(左手);<span class="hljs-built_in">std</span>::thread 右手线程(右手);   右手线程.join();   左手线程.join();      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></p><center><font size='1'>本文最后更新于2021年5月27日</font></center>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程锁</title>
    <link href="/peachskin/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/"/>
    <url>/peachskin/2021/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>多线程下冲突解决方案</font></center><center><font size='0'>sem_t信号量的使用</font></center><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>　　在多线程条件下，完成对🥧的计算。实验提供有单线程版本，要求进行修改，并在代码空白处实现多线程计算。学习使用信号量，防止在多线程计算最终结果时出错。原题目来自于<a href="https://easyhpc.net/course/106">超算平台homework3</a></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>　　从级数中可以知道</p><p>　　Pi = 4*（1 - 1/3 + 1/5 - 1/7 + 1/9 - …）</p><p>　　所以问题变成了求级数累加和，此处想法便是将计算总数平均分，不同线程各自计算自己的项数和，然后输出汇总到一个解上面。</p><p>　　因为不同的线程运行速度有快有慢，如果碰上两个线程对同一个共享内存进行加法操作，就会出现计算错误，为此引入信号量sem_t。</p><p>　　信号量使用，最基本的使用如下<br><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore&gt;# 引入这个库</span></span><span class="hljs-keyword">sem_t</span> sem# 新建一个信号量sem_init(&amp;sem ,<span class="hljs-number">0</span> ,<span class="hljs-number">1</span>)# 在main中调用将信号量初始化为<span class="hljs-number">1</span>sem_wait(&amp;sem)# 在进入临界区之前，等待锁释放sem_post(&amp;sem)# 临界区代码运行完毕后释放掉信号量sem_destory(&amp;sem)# 在主线程运行结束后，调用释放掉信号量</code></pre></p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>　　当n比较小的时候，这个时候，线程同步带来的开销比较大。<br><img src="http://img.yuko.buzz/images/2021/04/11/n100000.png" alt="n100000.png"><br>　　当n充分大的时候，此时线程同步带来的开销相比于计算用时已经微不足道，可以看见明显的速度提升。<br><img src="http://img.yuko.buzz/images/2021/04/11/n1000000000.png" alt="n1000000000.png"></p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;semaphore.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_TIME(now)                         \</span>   &#123;                                          \      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">t</span>;</span>                       \      gettimeofday(&amp;t, <span class="hljs-literal">NULL</span>);                 \      now = t.tv_sec + t.tv_usec / <span class="hljs-number">1000000.0</span>; \   &#125;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX_THREADS = <span class="hljs-number">1024</span>;<span class="hljs-keyword">long</span> thread_count;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n;<span class="hljs-keyword">double</span> sum;<span class="hljs-keyword">sem_t</span> sem;<span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">Thread_sum</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *rank)</span></span>;<span class="hljs-comment">/* Only executed by main thread */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Get_args</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Usage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *prog_name)</span></span>;<span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Serial_pi</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">long</span> thread; <span class="hljs-comment">/* Use long in case of a 64-bit system */</span>   <span class="hljs-keyword">pthread_t</span> *thread_handles;   <span class="hljs-keyword">double</span> start, finish, elapsed;   <span class="hljs-comment">/* please choose terms &#x27;n&#x27;, and the threads &#x27;thread_count&#x27; here. */</span>   n = <span class="hljs-number">10000000000</span>;<span class="hljs-comment">// 控制计算项数</span>   thread_count = <span class="hljs-number">4</span>;<span class="hljs-comment">// 线程数</span>   <span class="hljs-comment">/* You can also get number of threads from command line */</span>   <span class="hljs-comment">//Get_args(argc, argv);</span>   thread_handles = (<span class="hljs-keyword">pthread_t</span> *)<span class="hljs-built_in">malloc</span>(thread_count * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">pthread_t</span>));   sem_init(&amp;sem, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);   sum = <span class="hljs-number">0.0</span>;   GET_TIME(start);   <span class="hljs-keyword">for</span> (thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)      pthread_create(&amp;thread_handles[thread], <span class="hljs-literal">NULL</span>,                     Thread_sum, (<span class="hljs-keyword">void</span> *)thread);   <span class="hljs-keyword">for</span> (thread = <span class="hljs-number">0</span>; thread &lt; thread_count; thread++)      pthread_join(thread_handles[thread], <span class="hljs-literal">NULL</span>);   GET_TIME(finish);   elapsed = finish - start;   sum = <span class="hljs-number">4.0</span> * sum;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;With n = %lld terms,\n&quot;</span>, n);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   Our estimate of pi = %.15f\n&quot;</span>, sum);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elapsed time is %e seconds\n&quot;</span>, elapsed);   GET_TIME(start);   sum = Serial_pi(n);   GET_TIME(finish);   elapsed = finish - start;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   Single thread est  = %.15f\n&quot;</span>, sum);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elapsed time is %e seconds\n&quot;</span>, elapsed);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;                   pi = %.15f\n&quot;</span>, <span class="hljs-number">4.0</span> * <span class="hljs-built_in">atan</span>(<span class="hljs-number">1.0</span>));   sem_destroy(&amp;sem);   <span class="hljs-built_in">free</span>(thread_handles);   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125; <span class="hljs-comment">/* main */</span><span class="hljs-comment">/*------------------------------------------------------------------*/</span><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">Thread_sum</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *rank)</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">long</span> my_rank = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)rank;   <span class="hljs-keyword">double</span> my_sum = <span class="hljs-number">0.0</span>;   <span class="hljs-comment">/*******************************************************************/</span>   <span class="hljs-keyword">double</span> factor = <span class="hljs-number">1</span>;   <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> max_size = <span class="hljs-number">0</span>;   <span class="hljs-keyword">if</span> (my_rank == <span class="hljs-number">3</span>)<span class="hljs-comment">// 平均分配计算量，最后一个线程计算剩余部分。</span>   &#123;      max_size = n;   &#125;   <span class="hljs-keyword">else</span>   &#123;      max_size = my_rank * n / <span class="hljs-number">4</span> + n / <span class="hljs-number">4</span>;   &#125;   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i = my_rank * n / <span class="hljs-number">4</span>; i &lt; max_size; i++, factor = -factor)   &#123;      my_sum += factor / (<span class="hljs-number">2</span> * (i + my_rank) + <span class="hljs-number">1</span>);   &#125;   <span class="hljs-comment">//printf(&quot;%.15lf\n&quot;, my_sum);</span>   sem_wait(&amp;sem);<span class="hljs-comment">// 等待锁</span>   sum += my_sum;<span class="hljs-comment">// 临界状态</span>   sem_post(&amp;sem);<span class="hljs-comment">// 释放锁</span>   <span class="hljs-comment">/******************************************************************/</span>   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125; <span class="hljs-comment">/* Thread_sum */</span><span class="hljs-comment">/*------------------------------------------------------------------</span><span class="hljs-comment"> * Function:   Serial_pi</span><span class="hljs-comment"> * Purpose:    Estimate pi using 1 thread</span><span class="hljs-comment"> * In arg:     n</span><span class="hljs-comment"> * Return val: Estimate of pi using n terms of Maclaurin series</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Serial_pi</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n)</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;   <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> i;   <span class="hljs-keyword">double</span> factor = <span class="hljs-number">1.0</span>;   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++, factor = -factor)   &#123;      sum += factor / (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>);   &#125;   <span class="hljs-keyword">return</span> <span class="hljs-number">4.0</span> * sum;&#125; <span class="hljs-comment">/* Serial_pi */</span><span class="hljs-comment">/*------------------------------------------------------------------</span><span class="hljs-comment"> * Function:    Get_args</span><span class="hljs-comment"> * Purpose:     Get the command line args</span><span class="hljs-comment"> * In args:     argc, argv</span><span class="hljs-comment"> * Globals out: thread_count, n</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Get_args</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)      Usage(argv[<span class="hljs-number">0</span>]);   thread_count = strtol(argv[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);   <span class="hljs-keyword">if</span> (thread_count &lt;= <span class="hljs-number">0</span> || thread_count &gt; MAX_THREADS)      Usage(argv[<span class="hljs-number">0</span>]);   n = strtoll(argv[<span class="hljs-number">2</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);   <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>)      Usage(argv[<span class="hljs-number">0</span>]);&#125; <span class="hljs-comment">/* Get_args */</span><span class="hljs-comment">/*------------------------------------------------------------------</span><span class="hljs-comment"> * Function:  Usage</span><span class="hljs-comment"> * Purpose:   Print a message explaining how to run the program</span><span class="hljs-comment"> * In arg:    prog_name</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Usage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *prog_name)</span></span><span class="hljs-function"></span>&#123;   <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;number of threads&gt; &lt;n&gt;\n&quot;</span>, prog_name);   <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;   n is the number of terms and should be &gt;= 1\n&quot;</span>);   <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;   n should be evenly divisible by the number of threads\n&quot;</span>);   <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125; <span class="hljs-comment">/* Usage */</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>超级计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket套接字学习</title>
    <link href="/peachskin/2021/03/22/Socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%AD%A6%E4%B9%A0/"/>
    <url>/peachskin/2021/03/22/Socket%E5%A5%97%E6%8E%A5%E5%AD%97%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>Socket套接字的学习</font></center><center><font size='0'>也许可以拿来写个摸鱼聊天室</font></center><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　计算机网络课程学习使用操作系统库socket库实现一个能够在局域网内收发消息的命令行程序。参考资料来主要自于网上的库用法教程，留下此文记录下学习的过程。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　socket套接字是计算机网络中应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实是一个API将复杂的TCP/IP协议隐藏在socket接口后面，对于使用的用户来说，一组简单的接口就是全部，让Socket去组织数据，而用户自己只需要关心好传输的数据，对于怎么传输并不需要过多了解。</p><p>　　网络协议有分TCP和UDP两种协议，他们的作用都是收发数据包。唯一的不同是TCP面向连接，在收发数据包之前还有一个连接过程，只有建立连接之后才能发送数据包。而UDP并不需要这样一个过程，它可以做到只给一个地址，马上就能够发送，有急速发货那味了。<br>他们之间各有优劣。</p><hr><div class="table-container"><table><thead><tr><th>协议类型</th><th>优点</th><th>缺点</th><th>主要用途</th></tr></thead><tbody><tr><td>UDP</td><td>可以发送数据很快</td><td>容易丢包，造成网络波动</td><td>视频通话等对丢包不敏感，对速度敏感的领域</td></tr><tr><td>TCP</td><td>很稳定，不会丢包</td><td>相比较于UDP，速度较慢</td><td>收发文件等对进度有较高要求的</td></tr></tbody></table></div><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="TCP-Client"><a href="#TCP-Client" class="headerlink" title="TCP Client"></a>TCP Client</h2><p>　　如何在C++中使用socket（以下方法为windows10使用，教程为TCP连接，UDP再发）。首先加入socket头文件库<br> <pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Winsock2.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sindows.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;WS2_32.lib&quot;</span>)</span></code></pre><br>　　“WS2_32.lib”是windows下的socket链接库，在使用之前还需要按照如下方法初始化链接库</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;WSADATA wsd;    <span class="hljs-keyword">if</span> (WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsd))    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WSAStartup failed!\n&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;&#125;</code></pre><p>　　在一切准备妥当之后我们建立一个套接字<br><pre><code class="hljs C++">SOCKET sock;SOCKET sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); \\ PF_INET指定连接协议族、SOCK_STREAM表明是一个TCP协议addr.sin_family = AF_INET;\\addr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);\\指定服务器IP4地址addr.sin_port = htons(<span class="hljs-number">1234</span>);\\服务器开放的监听端口</code></pre><br>　　向服务器发送连接请求<br><pre><code class="hljs C++">connect(sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-keyword">sizeof</span>(SOCKADDR)+<span class="hljs-number">10</span>);</code></pre><br>　　建立连接后使用send函数向服务器发送数据<br><pre><code class="hljs C++">send(sock, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);\\sock表明地址，“aaa”是发送的数据，<span class="hljs-number">512</span>是发送字符数量（当然可以使用<span class="hljs-keyword">sizeof</span>动态，但是这里就偷懒拉），<span class="hljs-number">0</span>是一个标识符，一般不动</code></pre><br>　　监听来自服务器的回应<br><pre><code class="hljs C++">recv(sock, szBuffer, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);\\szBuffer是接受字缓冲区（就是收到的字符写到哪里），</code></pre></p><p>　　使用完连接资源后应当及时调用套接字关闭函数，释放被占用的资源<br><pre><code class="hljs C++">closesocket(sock);</code></pre></p><p>　　完整客户端代码<br><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ws2_32.lib&quot;</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">scmp</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a, <span class="hljs-keyword">char</span> *b)</span></span>&#123;<span class="hljs-comment">//</span>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] &amp;&amp; a[<span class="hljs-number">1</span>] == b[<span class="hljs-number">1</span>] &amp;&amp; a[<span class="hljs-number">2</span>] == b[<span class="hljs-number">2</span>] &amp;&amp; a[<span class="hljs-number">3</span>] == b[<span class="hljs-number">3</span>])&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//初始化DLL</span>    WSADATA wsaData;    <span class="hljs-keyword">if</span> (WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsd))    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WSAStartup failed!\n&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">//创建套接字</span>    SOCKET sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);    <span class="hljs-comment">//向服务器发起请求</span>    sockaddr_in sockAddr;    <span class="hljs-built_in">memset</span>(&amp;sockAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(sockAddr)); <span class="hljs-comment">//每个字节都用0填充</span>    sockAddr.sin_family = PF_INET;    sockAddr.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);    sockAddr.sin_port = htons(<span class="hljs-number">1234</span>);    <span class="hljs-keyword">if</span> (connect(sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-keyword">sizeof</span>(SOCKADDR)+<span class="hljs-number">10</span>))    &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;client connect error&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        closesocket(sock);        WSACleanup();        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    send(sock, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//接收服务器传回的数据</span>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)    &#123;        <span class="hljs-keyword">char</span> szBuffer[MAXBYTE] = &#123;<span class="hljs-number">0</span>&#125;;                recv(sock, szBuffer, MAXBYTE, <span class="hljs-number">0</span>);        <span class="hljs-comment">//输出接收到的数据</span>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Message from server: \n&quot;</span> &lt;&lt; szBuffer &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt;<span class="hljs-string">&quot;------------------------------&quot;</span>&lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-comment">// _sleep(50);</span>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;input your massage: &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        fgets(szBuffer, <span class="hljs-number">512</span>, <span class="hljs-built_in">stdin</span>);        <span class="hljs-keyword">if</span>(scmp(szBuffer,<span class="hljs-string">&quot;exit&quot;</span>) )&#123;<span class="hljs-comment">//输入exit关闭连接</span>            <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;-------------------------------&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        send(sock, szBuffer, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">//关闭套接字</span>    closesocket(sock);    <span class="hljs-comment">//终止使用 DLL</span>    WSACleanup();    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></p><h2 id="TCP-server端"><a href="#TCP-server端" class="headerlink" title="TCP server端"></a>TCP server端</h2><p>　　上面代码已经建立了一个具备信息收发能力的客户端，接下去写一个能够接受信息也可以发送信息进行交互的服务端程序。</p><p>　　服务端开头于客户端相同，不同的是套接字的建立方式<br> <pre><code class="hljs C++">sockaddr_in sockAddr;                sockAddr.sin_family = PF_INET;                       sockAddr.sin_addr.s_addr = htonl(INADDR_ANY);   \\表示绑定本机IP4地址 sockAddr.sin_port = htons(<span class="hljs-number">1234</span>); bind(Sock, (SOCKADDR *)&amp;Addr, <span class="hljs-keyword">sizeof</span>(SOCKADDR));\\把这个套接字绑定到服务器对应端口</code></pre><br> 　　接受来自客户端的连接请求<br> <pre><code class="hljs C++">SOCKET clntSock = accept(Sock, (SOCKADDR *)&amp;Addr, &amp;nSize);</code></pre><br> 　　完整的服务端代码<br> <pre><code class="hljs C++"> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ws2_32.lib&quot;</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">// #include &lt;sys/socket.h&gt;</span><span class="hljs-comment">// #include &lt;netinet/in.h&gt;</span><span class="hljs-comment">// #include &lt;arpa/inet.h&gt;</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;    WSADATA wsaData;    WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);    SOCKET Sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);    sockaddr_in sockAddr;    <span class="hljs-built_in">memset</span>(&amp;sockAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(sockAddr));               sockAddr.sin_family = PF_INET;                   sockAddr.sin_addr.s_addr = htonl(INADDR_ANY);          sockAddr.sin_port = htons(<span class="hljs-number">1234</span>);         bind(Sock, (SOCKADDR *)&amp;sockAddr, <span class="hljs-keyword">sizeof</span>(SOCKADDR));     <span class="hljs-keyword">if</span> (listen(Sock, SOMAXCONN) &lt; <span class="hljs-number">0</span>)    &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;listen set error&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    SOCKADDR clntAddr;    <span class="hljs-keyword">int</span> nSize = <span class="hljs-keyword">sizeof</span>(SOCKADDR);    SOCKET clntSock = accept(Sock, (SOCKADDR *)&amp;clntAddr, &amp;nSize);\\clntSock是收到的来自客户端地址，十分重要是之后发送数据依据    <span class="hljs-keyword">if</span> (clntSock == SOCKET_ERROR)    &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;error&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        closesocket(clntSock);        closesocket(Sock);        WSACleanup();        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;OK to connect&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">char</span> recv_buf[<span class="hljs-number">100</span>];    <span class="hljs-keyword">int</span> recv_len = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        recv_len = recv(clntSock, recv_buf, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>);        <span class="hljs-keyword">if</span> (recv_len &lt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;receive error !!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;message received&quot;</span> &lt;&lt; recv_buf &lt;&lt; <span class="hljs-built_in">endl</span>;        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;send out your message&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">char</span> send_buf[<span class="hljs-number">100</span>];        <span class="hljs-built_in">cin</span> &gt;&gt; send_buf;        <span class="hljs-keyword">int</span> send_len = <span class="hljs-built_in">strlen</span>(send_buf);        send_len = send(clntSock, send_buf, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>);        <span class="hljs-keyword">if</span> (send_len &lt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;send out successfully &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    closesocket(clntSock);    closesocket(servSock);    WSACleanup();    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 　　总体来说实验还是非常轻松的，可以将服务端放到真正的有公网IP的服务器上，这样就实现了一个非常简易的聊天室。尽管目前代码十分不完善，比如说只能在发送消息之后才能显示来自服务端的消息。这可以用多线程来做，不过就需要等到以后满满学习拉</p><hr><center><font size='0'>2021年3月22日</font></center>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scoop</title>
    <link href="/peachskin/2021/03/03/scoop/"/>
    <url>/peachskin/2021/03/03/scoop/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>windows下好用的包管理器scoop</font></center><center><font size='0'>脚本自动装软件是真的香</font></center><hr><h2 id="1、scoop简介"><a href="#1、scoop简介" class="headerlink" title="1、scoop简介"></a>1、scoop简介</h2><p>　　Scoop是Windows的命令行安装程序，是一个强大的包管理工具。可以在github上找到其项目的相关信息，项目<a href="https://github.com/lukesampson/scoop">网址</a>。</p><p>　　安装的起因：在平常生活中如果要安装像gcc、git等一些需要手动配置相关参数的工具，需要先去官网下载安装程序，点击安装，之后还需要配置，不仅过程麻烦，而且工具多了之后整理起来也相当不容易，配置也很杂，整个电脑就像被污染了一样。不仅如此，在windows下配置一个能使用的GCC编译器和GDB调试器，能够不出各种奇奇怪怪的问题就已经是谢天谢地了。这时候就好羡慕隔壁的linux强大的apt包管理器，或者mac的homebrew。这时候scoop横空出世。安装scoop后，只需要在命令行输入简单的一串命令即可安装你想要的软件。比如我想安装gcc，只需要输入</p><pre><code class="hljs CMD">scoop install gccscoop install gdb</code></pre><p>就能够帮我完成从安装到环境变量全部过程。从此告别百度为什么gcc命令出错。</p><h2 id="2、scoop安装方法"><a href="#2、scoop安装方法" class="headerlink" title="2、scoop安装方法"></a>2、scoop安装方法</h2><h3 id="1-环境要求"><a href="#1-环境要求" class="headerlink" title="1.环境要求"></a>1.环境要求</h3><ul><li>Windows 7 SP1 + / Windows Server 2008+</li><li>Powershell 5 或者更高版本和.NET Framework 4.5或者更高版本</li><li>必须为您的用户启用PowerShell，例如Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</li><li>你能够正常（最好是快速）访问最大<a href="https://github.com">同性交友网站</a></li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>首先打开使用管理员身份打开PowerShell，在里面输入这条命令启用脚本：<br><pre><code class="hljs CMD"><span class="hljs-built_in">set</span>-executionpolicy remotesigned -scope currentuser</code></pre><br>然后使用这条命令一键安装：<br><pre><code class="hljs CMD">iex (new-object <span class="hljs-built_in">net</span>.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)或者iwr -useb get.scoop.sh | iex</code></pre><br>我们等待命令运行结束，输入<br><pre><code class="hljs cmd">scoop <span class="hljs-built_in">help</span></code></pre><br>如果出现了<br><img src='https://img-blog.csdnimg.cn/20191109184638568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1b3lvb2k=,size_16,color_FFFFFF,t_70' ><br>　　那么恭喜安装完成。安装到此结束。顺带一提，这个软件是默认安装到“C:\用户\scoop\”底下的。而且在此下载安装的所有软件都会在这个目录的“\app\”底下。C盘空间多，那就就此结束。如果C盘空间不够，不要急，接下去看。</p><h3 id="3、移动默认安装位置"><a href="#3、移动默认安装位置" class="headerlink" title="3、移动默认安装位置"></a>3、移动默认安装位置</h3><p>　　我相信各位需要这个功能，也需要这个软件是一定有动手能力的。<br>将scoop安装到自定义目录<br><pre><code class="hljs cmd">$env:SCOOP=&#x27;D:\Applications\Scoop&#x27;   \\你的目录[Environment]::SetEnvironmentVariable(&#x27;SCOOP&#x27;, $env:SCOOP, &#x27;User&#x27;)</code></pre><br>将软件安装到这个目录<br><pre><code class="hljs cmd">$env:SCOOP_GLOBAL=&#x27;F:\GlobalScoopApps&#x27;[Environment]::SetEnvironmentVariable(&#x27;SCOOP_GLOBAL&#x27;, $env:SCOOP_GLOBAL, &#x27;Machine&#x27;)</code></pre><br>以上是命令行方法。</p><hr><p>接下来是不适用命令行的方法：</p><p>　　到“C:\用户\scoop”将所有文件拷贝到你需要的地方，例如“D:\scoop”，然后打开底下“shims”文件夹，里面有一个“scoop.cmd”的文件，右键编辑它。在里面找到这样一行代码</p><pre><code class="hljs cmd">powershell -noprofile -ex unrestricted &quot;&amp; &#x27;C:\用户名字\scoop\apps\scoop\current\bin\scoop.ps1&#x27;  <span class="hljs-variable">%args%</span>;<span class="hljs-keyword">exit</span> $lastexitcode&quot;</code></pre><p>修改为<br><pre><code class="hljs cmd">powershell -noprofile -ex unrestricted &quot;&amp; &#x27;D:\Scoop\apps\scoop\current\bin\scoop.ps1&#x27;  <span class="hljs-variable">%args%</span>;<span class="hljs-keyword">exit</span> $lastexitcode&quot;</code></pre><br>之后前往环境变量，把scoop添加的环境变量重新定位。定位到”D:\Scoop”即可。完成上述安装之后，运行<br><pre><code class="hljs cmd">scoop update</code></pre><br>更新软件源，更新scoop自己。就可以开始愉快的使用了。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">动作</th></tr></thead><tbody><tr><td style="text-align:center">search</td><td style="text-align:center">搜索软件</td></tr><tr><td style="text-align:center">install</td><td style="text-align:center">安装软件</td></tr><tr><td style="text-align:center">update</td><td style="text-align:center">升级软件，不跟上软件名称即为更新scoop本身</td></tr><tr><td style="text-align:center">status</td><td style="text-align:center">查看软件状态</td></tr><tr><td style="text-align:center">uninstall</td><td style="text-align:center">卸载软件，卸载scoop为“scoop uninstall scoop”</td></tr><tr><td style="text-align:center">info</td><td style="text-align:center">查看软件详情</td></tr><tr><td style="text-align:center">home</td><td style="text-align:center">查看软件主页</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">列出已安装的软件名称</td></tr><tr><td style="text-align:center">cache</td><td style="text-align:center">安装，更新软件时的缓存，建议更新后清理</td></tr></tbody></table></div><h2 id="为什么推荐包管理器"><a href="#为什么推荐包管理器" class="headerlink" title="为什么推荐包管理器"></a>为什么推荐包管理器</h2><p>　　作为一个包管理器，最基础，也是最重要的功能就是<em>安装软件</em>。正在使用 Windows 的你一定在想：「为什么我要用它？为什么我不直接百度一下？」。<br>　　当然可以</p><ul><li>百度一下这个软件</li><li>然后在一堆奇奇怪怪的下载链接中徘徊</li><li>看到一个看上去最无毒，最没有捆绑的安装包</li><li>小心翼翼的避开流氓特性</li><li>选择一个合适的安装位置，防止到处拉屎</li><li>结束</li></ul><p>好麻烦的安装！！</p><p>　　Scoop 等一系列包管理器的诞生，第一大便利就是省去了上述繁琐的「搜索 - 下载 - 安装」的步骤，让我们能够通过「一行代码」急速安装。💪</p><p>同时，用Scoop来安装和管理我们的软件：</p><ul><li>集搜索、下载、安装、更新于一体；极大的降低了安装维护一个软件的成本，我们甚至不需要在软件复杂的菜单中找到更新按钮，也不会有烦人的弹窗提醒你更新</li><li>将软件干干净净的安装到电脑的{用户文件夹}下：既不会污染路径，也不会请求不必要的权限。</li><li>卸载软件也能够尽可能的清空软件任何数据</li><li>有一些必要但是安装不容易的软件例如gdb也能够一键解决</li></ul><h2 id="胡诌两句"><a href="#胡诌两句" class="headerlink" title="胡诌两句"></a>胡诌两句</h2><p>　　scoop学的好，理论上可以编写一个脚本，装完系统之后，只需要轻松一点脚本，就自动把常用软件安装上，还是很不错的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>help</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广州地铁线路规划</title>
    <link href="/peachskin/2020/12/01/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81%E7%BA%BF%E8%B7%AF%E8%A7%84%E5%88%92/"/>
    <url>/peachskin/2020/12/01/%E5%B9%BF%E5%B7%9E%E5%9C%B0%E9%93%81%E7%BA%BF%E8%B7%AF%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<center><font size="8">Dijkstra算法应用</font><font size="0">广州地铁线路规划程序（来自Qhy的作业）</font></center><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>　　数据结构作业的期末作业，要求设计一个广州地铁线路规划程序。输入出发站点和目的站点，输出最短乘坐路径和换乘线路方法。</p><p>　　这项作业是对本学期所学的数据结构一个综合考验，比起Dijkstra算法，如何存储地铁线路图，如何将站点名称输出，如何存储图、建立图，如何将中文字符对应到一个可以计算使用的数字，以及线路更新的考虑是本程序需要考虑的重点。</p><h1 id="二、核心函数"><a href="#二、核心函数" class="headerlink" title="二、核心函数"></a>二、核心函数</h1><h2 id="1、从中文走向数字"><a href="#1、从中文走向数字" class="headerlink" title="1、从中文走向数字"></a>1、从中文走向数字</h2><p>　　广州地铁上的站点都是中文字符，很明显，中文字符无论是制作成邻接表还是邻接矩阵都是不合适的，因此需要一种方法，将广州地铁上上百个站点一一转换成计算机可以用来计算的数字。人工手动更换是绝对的不合适，先不说上百个站点的标记十分累人，更加重要的是这样的程序完全没有任何的可拓展性，它就不能适应新加的地铁站点。<br>　　所以，给站点打标记的活还是要交给计算机干，这里采用的方法是，将地铁站所有的站点和站点之间的线路权值存储在同一个文件中。存储方式如下图，第一个字符表示是哪一条线路，第二个表示始发站，第三个字符串表示终点站，第四个数字表示边的权值。</p><p><img src="http://img.yuko.buzz/images/2021/03/31/Snipaste_2021-03-31_22-18-34.png"></p><p>　　然后是从上面的数据文件中建图，注意到这个图的邻接矩阵会是一个稀疏矩阵，采用邻接表的方法存储图。部分站点可能是换乘站，为减少换乘站带来的可能问题，此处选择给同名站点名称后添加字符加以区别，例如“万胜围”在4号线出现一次，那么在8号线出现的存储为“万胜围0”以此类推。但是在这样的处理方法会导致各条线路之间不连通，和真实的地铁线路不符合，所以在换乘站之间添加一条边权为0的边连通。<br>　　除此之外段程序还做三件事情，一个是给每一个站点赋予一个独特的id，用于程序计算；二是建立一个id到文本的映射，方便文本输出线路；三是建立一个文本到id的映射，方便将收到的出发站和终点站转换为内置id。<br> <pre><code class="hljs c++"> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subway_system::readData</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;edge&gt; &amp;edges)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">// string a;</span><span class="hljs-comment">// cin &gt;&gt; a;</span><span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;srcdata&quot;</span>)</span></span>;<span class="hljs-keyword">int</span> distance, ID[<span class="hljs-number">2</span>];<span class="hljs-built_in">string</span> line, station[<span class="hljs-number">2</span>];<span class="hljs-keyword">while</span> (fin &gt;&gt; line &gt;&gt; station[<span class="hljs-number">0</span>] &gt;&gt; station[<span class="hljs-number">1</span>] &gt;&gt; distance)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;<span class="hljs-keyword">auto</span> findStation = Stations.find(station[i]);<span class="hljs-comment">//查找不到这个站点</span><span class="hljs-keyword">if</span> (findStation == Stations.end())&#123;ID[i] = Stations.size();Stations[station[i]] = <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;(line, ID[i]);station_name.push_back(station[i]);&#125;<span class="hljs-comment">//该站点在本线路上已经出现</span><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((*findStation).second.first == line)ID[i] = Stations[station[i]].second;<span class="hljs-comment">//这是一个换乘站点</span><span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">string</span> it_name = station[i];<span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;1&#x27;</span>;station[i] += c;<span class="hljs-keyword">auto</span> it = Stations.find(station[i]);<span class="hljs-keyword">while</span> (it != Stations.end() &amp;&amp; (*it).second.first != line)&#123;station[i].back() = ++c;it = Stations.find(station[i]);&#125;<span class="hljs-keyword">if</span> (it == Stations.end())&#123;ID[i] = Stations.size();Stations[station[i]] = <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;(line, ID[i]);station_name.push_back(station[i]);&#125;<span class="hljs-keyword">else</span>ID[i] = Stations[station[i]].second;edges.push_back(edge(ID[i], Stations[it_name].second, <span class="hljs-number">0</span>));<span class="hljs-comment">//增加边权为0的边</span>&#125;&#125;edges.push_back(edge(ID[<span class="hljs-number">0</span>], ID[<span class="hljs-number">1</span>], distance));&#125;n = edges.size() + <span class="hljs-number">1</span>;fin.close();<span class="hljs-comment">//cout &lt;&lt; Stations.size() &lt;&lt; endl;</span><span class="hljs-keyword">return</span>;&#125;</code></pre></p><h2 id="2、节点存储"><a href="#2、节点存储" class="headerlink" title="2、节点存储"></a>2、节点存储</h2><p> 　　地铁站点上是会有非常多的信息，比如说它在本程序中的id，方便Dijkstra算法必须的dis数据，bool类型的known，因此结构化为一个数据体<br><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vertex</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">size_t</span> dis;<span class="hljs-comment">//最短路径算法使用</span><span class="hljs-keyword">int</span> id;<span class="hljs-comment">//在程序中的id</span><span class="hljs-keyword">int</span> path;<span class="hljs-comment">//父节点，输出从换乘线路使用</span><span class="hljs-keyword">bool</span> known;<span class="hljs-comment">//标记是否已经被搜索到</span><span class="hljs-keyword">bool</span> popped;<span class="hljs-comment">//输出线路使用</span>vertex() : dis(inf), known(<span class="hljs-literal">false</span>), popped(<span class="hljs-literal">false</span>) &#123;&#125;&#125;;</code></pre></p><h2 id="3、最短路径"><a href="#3、最短路径" class="headerlink" title="3、最短路径"></a>3、最短路径</h2><p>　　标准的Dijkstra算法，没有什么好说的。本段函数会找到最短路径，并且返回一个记录了最短路径走法的vector数组，从目的地前往始发点。因此在正式转化输出之前，还需要倒置。<br><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">subway_system::getShortestPath</span><span class="hljs-params">(<span class="hljs-keyword">int</span> origin, <span class="hljs-keyword">int</span> destination)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; known;<span class="hljs-comment">//initialize</span><span class="hljs-built_in">vector</span>&lt;vertex&gt; nodes;nodes.resize(n);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; nodes.size(); i++)&#123;nodes[i].id = i;nodes[i].path = i;nodes[i].popped = <span class="hljs-literal">false</span>;&#125;nodes[origin].dis = <span class="hljs-number">0</span>;nodes[origin].known = <span class="hljs-literal">true</span>;nodes[origin].path = origin;known.insert(origin);<span class="hljs-comment">//calculating</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>, min_dis = inf;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;entry : known)<span class="hljs-keyword">if</span> (!(nodes[entry].popped) &amp;&amp; nodes[entry].dis &lt; min_dis)&#123;min_dis = nodes[entry].dis;index = entry;&#125;<span class="hljs-keyword">if</span> (index == destination)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//cout &lt;&lt; station_name[index] &lt;&lt; &quot; &quot;;</span>nodes[index].popped = <span class="hljs-literal">true</span>;vertex u = nodes[index];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;entry : E[u.id])&#123;<span class="hljs-keyword">if</span> (!nodes[entry.first].known)&#123;<span class="hljs-keyword">if</span> (nodes[entry.first].dis &gt; nodes[u.id].dis + entry.second)&#123;nodes[entry.first].known = <span class="hljs-literal">true</span>;known.insert(entry.first);nodes[entry.first].dis = nodes[u.id].dis + entry.second;nodes[entry.first].path = u.id;&#125;&#125;&#125;&#125;<span class="hljs-keyword">if</span> (nodes[destination].known == <span class="hljs-literal">false</span>)&#123;<span class="hljs-keyword">return</span> res;&#125;<span class="hljs-comment">//get path</span><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; temp;<span class="hljs-keyword">int</span> cur = destination;temp.push(cur);<span class="hljs-keyword">while</span> (nodes[cur].path != origin)&#123;cur = nodes[cur].path;temp.push(cur);&#125;temp.push(origin);<span class="hljs-keyword">while</span> (!temp.empty())&#123;res.push_back(temp.top());temp.pop();&#125;<span class="hljs-keyword">return</span> res;&#125;</code></pre></p><h2 id="4、输出结果"><a href="#4、输出结果" class="headerlink" title="4、输出结果"></a>4、输出结果</h2><p>　　在上一个函数获得了最短路径的id。人是看不懂这样一个数组有任何的关系，因此还需要一个输出函数，将一串数组转换为人可以看得懂的站点输出，并且输出换乘信息</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">subway_system::checkLine</span><span class="hljs-params">(<span class="hljs-built_in">string</span> oringin, <span class="hljs-built_in">string</span> destination)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; output;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>&gt;&gt; transform;<span class="hljs-keyword">int</span> ori = <span class="hljs-keyword">this</span>-&gt;Stations[oringin].second;<span class="hljs-keyword">int</span> dest = <span class="hljs-keyword">this</span>-&gt;Stations[destination].second;result = getShortestPath(ori, dest);<span class="hljs-keyword">if</span> (result.size() == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;不存在这样一条道路&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-built_in">string</span> a;<span class="hljs-keyword">return</span> a;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; result.size(); i++)&#123;output.push_back(del_num(station_name[result[i]]));&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; result.size();i++)&#123;<span class="hljs-keyword">if</span> (del_num(station_name[result[i]]) == del_num(station_name[result[i - <span class="hljs-number">1</span>]]) &amp;&amp; i &gt; <span class="hljs-number">1</span>)&#123;pair&lt;string, string&gt; temp(Stations[station_name[result[i]]].first, Stations[station_name[result[i - 1]]].first);transform.push_back(temp);&#125;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; output[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span>;<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-built_in">string</span> all_in_one;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; output.size(); i++)&#123;<span class="hljs-keyword">if</span> (i == output.size() - <span class="hljs-number">1</span>)&#123;all_in_one.append( output[i]);all_in_one.append(<span class="hljs-string">&quot;\n&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (output[i] != output[i - <span class="hljs-number">1</span>])&#123;all_in_one.append(output[i]);all_in_one.append(<span class="hljs-string">&quot;-&gt;&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;all_in_one.append(<span class="hljs-string">&quot;从&quot;</span>);all_in_one.append(transform[j].second);all_in_one.append(<span class="hljs-string">&quot;号线转到&quot;</span>);all_in_one.append(transform[j++].first);all_in_one.append(<span class="hljs-string">&quot;号线\n&quot;</span>);&#125;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; all_in_one;<span class="hljs-built_in">std</span>::system(<span class="hljs-string">&quot;pause&quot;</span>);<span class="hljs-keyword">return</span> all_in_one;&#125;</code></pre><h1 id="三、其他边缘函数"><a href="#三、其他边缘函数" class="headerlink" title="三、其他边缘函数"></a>三、其他边缘函数</h1><h2 id="1、删掉站点名称后的数字"><a href="#1、删掉站点名称后的数字" class="headerlink" title="1、删掉站点名称后的数字"></a>1、删掉站点名称后的数字</h2><p>　　本项其实问题不大，主要是针对强迫症的，对人来说，多个数字一样能看<br><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">del_num</span><span class="hljs-params">(<span class="hljs-built_in">string</span> a)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.size(); i++)&#123;<span class="hljs-keyword">if</span> (a[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; a[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;a.erase(i, <span class="hljs-number">1</span>);&#125;&#125;<span class="hljs-keyword">return</span> a;&#125;</code></pre></p><h2 id="2、建图"><a href="#2、建图" class="headerlink" title="2、建图"></a>2、建图</h2><p>　　讲真，上面所谓的建图，其实只是完成了边的读入，并没有建立一个邻接表，这段函数的目的就是从边建立一个可以被最短路径算法使用的邻接表<br><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>//边的数据结构</span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> u, v, w;edge(<span class="hljs-keyword">int</span> U, <span class="hljs-keyword">int</span> V, <span class="hljs-keyword">int</span> W = inf) :u(U), v(V), w(W) &#123;  &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">subway_system::makeGraph</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;edge&gt; &amp;edges)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; tmp;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = Stations.size(); i--;)<span class="hljs-comment">//几条线路</span>E.push_back(tmp);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;item : edges)&#123;E[item.u].push_back(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(item.v, item.w));E[item.v].push_back(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;(item.u, item.w));&#125;&#125;</code></pre></p><h1 id="四、其他注意事项"><a href="#四、其他注意事项" class="headerlink" title="四、其他注意事项"></a>四、其他注意事项</h1><p>　　也就是尽量不要在window的终端上运行，或者在编译之前将<a href="https://github.com/peach-water/guangzhou_subway">源代码</a>转换为GBK编码，不然终端看见的只有一片乱码。</p><h1 id="五、回想，鸣谢"><a href="#五、回想，鸣谢" class="headerlink" title="五、回想，鸣谢"></a>五、回想，鸣谢</h1><p>　　本代码主要来自github上昊C和他的舍友大佬。最初的版本因为有一点点小问题，没有解决0权值边的问题，导致在测试的时候经常崩电脑（后来查实是因为一直压栈最后爆内存了）。仔细排查才最后发现，原来是建图的时候，没有给换乘站一个他们之间连线，导致在输出的时候一直压栈，因为没有到达目的地。但是其他部分实现的还是非常完美。</p>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Download</title>
    <link href="/peachskin/2020/11/01/download/"/>
    <url>/peachskin/2020/11/01/download/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>就算是摸鱼也要好好的摸</font></center><h2 id="好软推荐"><a href="#好软推荐" class="headerlink" title="好软推荐"></a>好软推荐</h2><ul><li><p>一个好使的图片浏览器：<a href="https://tw.bandisoft.com/honeyview/">honeyview</a><br>　　烦恼微软家自带的图片浏览器难用？苦于自带的图片浏览器打开速度总是捉急？那么它必然是一个好选择。</p></li><li><p>既然都有图片了，怎么能够没有一个优秀的视频播放器：<a href="https://potplayer.en.softonic.com/">PotPlayer</a><br>　　光这个其实还不能够说明它的强大之处，~你可能只会觉得他是一个外观丑陋的视频播放器，搭配上一个神秘的网址，你就能够观看全球电视直播，至少国内中央台都是可以看的~除此之外就是，好看无边框（需要手动设置一下），如果下载不到，在scoop里面试试？</p></li><li><p>文件资源浏览器推荐：<a href="http://qttabbar.sourceforge.net/">QTTabBar</a><br>　　虽然不是很好看，甚至可以说加的内容还有一些丑陋，但是就那一点能够支持新建标签页，我就觉得比自带的文件浏览器好使。至少不用再很多个不知道所以的窗口中寻寻觅觅，最最最重要的是支持在此处打开CMD，这实在是好使。</p></li><li><p>软件卸载器：<a href="https://www.iobit.com/en/index.php">IOBit Uninstall</a><br>　　还是弥补自带的软件卸载的不足，自带的能卸载软件，对！就是能够卸载软件，至于软件留下来的数据，抱歉一概不会删除。这个时候就需要请出来它。对了有些时候并不是所有的都软件卸载都需要清理数据文件，还是在清理之前好做思考。除此之外就是普通版本已经足够普通人日常使用，没有加钱上专业版的必要（当然是可以去支持一下的啦~）</p></li><li><p>重装系统的工具：<a href="http://www.wepe.com.cn/">微PE</a><br>　　重装系统当然推荐，虽然现在有点变化，开始收费了。但是至少不流氓，而且收费也不算太贵，其实吧，就算买一个软碟通也不见得能够有多少便宜（支持一下良心开发者呗）。有了它，从此之后获得一U在手，天下我有；打开女生宿舍大门的万能钥匙；万能的工具人（误）等等称号</p></li><li><p>宇宙最强IDE：<a href="https://peach-water.github.io/peachskin/2020/10/11/vscode/">VsCode</a>  </p></li><li><p>美化桌面的方法：<a href="https://www.rainmeter.net/">Rainmeter</a><br>　　能够做到什么样子完全看自己折腾能力，最好当然是自己慢慢设计~<br>　　建议搭配贴吧上一个<a href="http://tieba.baidu.com/p/2085771413?see_lz=1">资源帖子</a>实现</p></li><li><p>一个小白向写镜像工具：<a href="https://www.balena.io/etcher/">balenaEtcher</a><br>　　我记得是大部分的镜像都可以写，更更更重要的是真的小白向，哪怕你完全不知道怎么操作，对于不同系统的镜像无所适从，都不要担心，这个可以解决你的问题。</p><center><img src="https://www.balena.io/static/steps-8006dca57323756b1b84fb9408742409.gif"></center></li><li><p>强大的windows包管理器：<a href="https://scoop.sh/">SCOOP</a><br>　　linux有apt包管理器，MAC有homebrew，大名鼎鼎的windows呢？怎么能够没有一个合适的包管理器？于是scoop应运而生，再也不用为windows环境下安装C++环境或者各种环境发愁了，连同加入PATH一起完成。<br>　　网址中有简要的安装方法，如果不行，没关系，~百度有非常多的方法帮助你解决所有问题~也许应该检查一下是不是管理员身份（我说的只是也许啊，至少，人不能，不应该）。</p></li></ul><h2 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h2><ul><li>GAYHUB，全球最大的代码交流平台：<a href="https://github.com">Github</a></li><li>桌面美化教程资源：<a href="https://zhutix.com/tag/10s/">致美化</a></li><li>程序员工具：<a href="http://t.swifty.cc/md5/index.html">在线加密解密工具</a></li><li>域名查询、IP4查询：<a href="https://site.ip138.com/">其实不止从域名查IP4</a></li></ul><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><center><font size = '0'>最后更新时间2020年10月25日22:24</font></center>]]></content>
    
    
    
    <tags>
      
      <tag>source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Huffman</title>
    <link href="/peachskin/2020/11/01/Huffman/"/>
    <url>/peachskin/2020/11/01/Huffman/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>使用Huffman编码实现一个压缩和解压缩软件</font></center>  <h2 id="初识Huffman"><a href="#初识Huffman" class="headerlink" title="初识Huffman"></a>初识Huffman</h2><p>　　简单说明一下Huffman编码的原理<br>  　　实现霍夫曼编码的方式主要是创建一个二叉树和其节点。这些树的节点可以存储在数组里，数组的大小为符号（symbols）数的大小n，而节点分别是终端节点（叶节点）与非终端节点（内部节点）。</p><p>　　一开始，所有的节点都是终端节点，节点内有三个字段：</p><p>　　1.符号（Symbol）</p><p>　　2.权重（Weight、Probabilities、Frequency）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　而非终端节点内有四个字段：</p><p>　　1.权重（Weight、Probabilities、Frequency）</p><p>　　2.指向两个子节点的 链接（Links to two child node）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　基本上，我们用’0’与’1’分别代表指向左子节点与右子节点，最后为完成的二叉树共有n个终端节点与n-1个非终端节点，去除了不必要的符号并产生最佳的编码长度。</p><p>　　过程中，每个终端节点都包含着一个权重（Weight、Probabilities、Frequency），两两终端节点结合会产生一个新节点，新节点的权重是由两个权重最小的终端节点权重之总和，并持续进行此过程直到只剩下一个节点为止。</p><p>　　实现霍夫曼树的方式有很多种，可以使用优先队列（Priority Queue）简单达成这个过程，给与权重较低的符号较高的优先级（Priority），算法如下：</p><p>　　⒈把n个终端节点加入优先队列，则n个节点都有一个优先权Pi，1 ≤ i ≤ n</p><p>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列中移除两个最小的Pi节点，即连续做两次remove（min（Pi）, Priority_Queue)<br>　　　⑵产生一个新节点，此节点为（1）之移除节点之父节点，而此节点的权重值为（1）两节点之权重和<br>　　　⑶把（2）产生之节点加入优先队列中<br>　　⒊最后在优先队列里的点为树的根节点（root）<br>　　<br>　　而此算法的时间复杂度（ Time Complexity）为O（n log n）；因为有n个终端节点，所以树总共有2n-1个节点，使用优先队列每个循环须O（log n）。</p><p>　　此外，有一个更快的方式使时间复杂度降至线性时间（Linear Time）O（n），就是使用两个队列（Queue）创件霍夫曼树。第一个队列用来存储n个符号（即n个终端节点）的权重，第二个队列用来存储两两权重的合（即非终端节点）。此法可保证第二个队列的前端（Front）权重永远都是最小值，且方法如下：</p><p>　　⒈把n个终端节点加入第一个队列（依照权重大小排列，最小在前端）<br>　<br>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列前端移除两个最低权重的节点<br>　　　⑵将（1）中移除的两个节点权重相加合成一个新节点<br>　　　⑶加入第二个队列<br>　　⒊最后在第一个队列的节点为根节点</p><p>　　虽然使用此方法比使用优先队列的时间复杂度还低，但是注意此法的第1项，节点必须依照权重大小加入队列中，如果节点加入顺序不按大小，则需要经过排序，则至少花了O（n log n）的时间复杂度计算。</p><p>　　但是在不同的状况考量下，时间复杂度并非是最重要的，如果我们今天考虑英文字母的出现频率，变量n就是英文字母的26个字母，则使用哪一种算法时间复杂度都不会影响很大，因为n不是一笔庞大的数字。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li><h3 id="关于Huffman节点的定义"><a href="#关于Huffman节点的定义" class="headerlink" title="关于Huffman节点的定义"></a>关于Huffman节点的定义</h3><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span>&#123;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span> *<span class="hljs-title">lc</span>;</span><span class="hljs-comment">//左右子树</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span> *<span class="hljs-title">rc</span>;</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">pow</span>;<span class="hljs-comment">//当前节点的权重</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> Data;<span class="hljs-comment">//这个节点如果是叶子结点，那么存储编码对应的字符</span>    <span class="hljs-keyword">bool</span> leaf;<span class="hljs-comment">//标记是否是字符</span>    <span class="hljs-built_in">string</span> code;<span class="hljs-comment">//存储对应的Huffman编码</span>    Hufnode() : lc(<span class="hljs-literal">NULL</span>), rc(<span class="hljs-literal">NULL</span>), leaf(<span class="hljs-literal">true</span>)&#123;&#125;<span class="hljs-comment">//初始化节点</span>&#125;</code></pre><p>除此之外我们还需要实现一些节点赋值的操作符重载，方便赋值</p><pre><code class="hljs C++"><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>=(Hufnode *oth)<span class="hljs-comment">//重载等于号的意义非常重大</span>&#123;    <span class="hljs-keyword">this</span>-&gt;code = oth-&gt;code;    <span class="hljs-keyword">this</span>-&gt;Data = oth-&gt;Data;    <span class="hljs-keyword">this</span>-&gt;lc = oth-&gt;lc;    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pow</span> = oth-&gt;<span class="hljs-built_in">pow</span>;    <span class="hljs-keyword">this</span>-&gt;rc = oth-&gt;rc;    <span class="hljs-keyword">this</span>-&gt;leaf = oth-&gt;leaf;&#125;<span class="hljs-keyword">operator</span> Hufnode *()<span class="hljs-comment">//同样的，重载Hufnode到Hufnide*</span>&#123;    Hufnode *res = <span class="hljs-keyword">new</span> Hufnode;    res-&gt;Data = <span class="hljs-keyword">this</span>-&gt;Data;    res-&gt;<span class="hljs-built_in">pow</span> = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pow</span>;    res-&gt;code = <span class="hljs-keyword">this</span>-&gt;code;    res-&gt;lc = <span class="hljs-keyword">this</span>-&gt;lc;    res-&gt;leaf = <span class="hljs-keyword">this</span>-&gt;leaf;    res-&gt;rc = <span class="hljs-keyword">this</span>-&gt;rc;    <span class="hljs-keyword">return</span> res;&#125;</code></pre></li><li><h3 id="实现Huffman树的构建"><a href="#实现Huffman树的构建" class="headerlink" title="实现Huffman树的构建"></a>实现Huffman树的构建</h3><p>　　根据开头介绍的两种方法，各有千秋，其中我们使用比较容易理解的方法，此处不使用优先队列等等优化性的算法，转向使用冒泡排序，因为排序的内容不算多，而且在第一次排序完成之后不会有较多的排序要求，我们可以通过对冒泡优化加快速度（使其变成一个插入算法）。<br>　　此处实现一个class类，负责实现Huffman树的构建和相关</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hufman</span>&#123;</span><span class="hljs-keyword">private</span>:    Hufnode * root<span class="hljs-comment">//记录下Huffman树的根节点</span>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>, <span class="hljs-built_in">string</span>&gt; code_map<span class="hljs-comment">//用来快速访问字符对应的Huffman编码</span>&#125;</code></pre><p>　然后我们需要实现一些相关的函数来完善这样一个Huffman类</p><pre><code class="hljs C++"><span class="hljs-function">Hufnode *<span class="hljs-title">return_root</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//获得当前Huffman树的根节点</span><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pow_len</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//返回文件拥有的字符数量  </span><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">return_code</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-comment">//根据字符返回对应的Huffman编码  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(Hufnode *root)</span></span>;    <span class="hljs-comment">//递归调用，解构函数</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build_huf</span><span class="hljs-params">(Hufnode data[], <span class="hljs-keyword">int</span> size)</span></span>;<span class="hljs-comment">//构建Huffman树，输入的是节点数量和节点  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_code</span><span class="hljs-params">(Hufnode *root, <span class="hljs-built_in">string</span> fa, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *c)</span></span>;<span class="hljs-comment">//根据建立的Huffman树，递归给每一个字符生成Huffman编码  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bob_sort</span><span class="hljs-params">(Hufnode data[], <span class="hljs-keyword">int</span> size)</span></span>;<span class="hljs-comment">//优化过的冒泡排序  </span></code></pre></li><li><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>　　<font size='4'>任务挺多，都是是需要单独实现的东西：  </font></p><ul><li>关于需要被压缩的文件读入，输出的文件格式；</li><li>读入字符统计不同字符出现的次数；</li><li>把编码后的文件写入到输出文件当中；</li><li>特殊情况处理：最后字符不是完整的字节</li></ul><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zip</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *input, <span class="hljs-keyword">char</span> *output)</span></span>&#123;<span class="hljs-comment">//此处偷懒用一用ZIP命名不会出事吧，不会吧</span>FILE *fp = <span class="hljs-literal">NULL</span>, *outfile = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//文件输入和输出</span>  byte_fre <span class="hljs-built_in">array</span>[<span class="hljs-number">256</span>];<span class="hljs-comment">//用二进制方式读入文件，可以实现对所有格式文件兼容，开256个空间是因为只有256种不同的字节。</span>  Hufnode *data;<span class="hljs-comment">//Huffman建树的临时缓冲区</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> char_temp = <span class="hljs-number">0</span>;<span class="hljs-comment">//字节操作文件的缓冲区</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> code_len = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录文件长度</span>  data = <span class="hljs-keyword">new</span> Hufnode[<span class="hljs-number">256</span>];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)      <span class="hljs-built_in">array</span>[i].data = i;  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> buffer[MAX_LINE];  buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;</code></pre><p>　　在上面初始化zip压缩函数，然后开始读入文件，求解统计整个文件不同字节权值。  </p><pre><code class="hljs C++"><span class="hljs-keyword">while</span> (!feof(fp) &amp;&amp; fread(buffer, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, fp))&#123;    <span class="hljs-keyword">int</span> a = buffer[<span class="hljs-number">0</span>];    <span class="hljs-built_in">array</span>[a].fre++;<span class="hljs-comment">//统计不同的字节权值</span>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">//搜集权值用来构建hafuman树 </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)    &#123;        data[len].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;        data[len].leaf = <span class="hljs-literal">true</span>;        data[len++].Data = <span class="hljs-built_in">array</span>[i].data;    &#125;&#125;Hufman CODE;CODE.build_huf(data, len); <span class="hljs-comment">//此处调用hufman类里面的建树</span>len = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">// 为了在元数据写入不同字节权重</span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)    &#123;        data[len].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;        data[len].leaf = <span class="hljs-literal">true</span>;        data[len++].Data = <span class="hljs-built_in">array</span>[i].data;    &#125;&#125;outfile = fopen(output, <span class="hljs-string">&quot;wb+&quot;</span>);fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;data[i].Data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile);    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;data[i].<span class="hljs-built_in">pow</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, outfile);&#125;<span class="hljs-keyword">char</span> code_buf[<span class="hljs-number">256</span>] = <span class="hljs-string">&quot;\0&quot;</span>; <span class="hljs-comment">// </span>rewind(fp);<span class="hljs-keyword">int</span> file_len = CODE.pow_len();fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *)&amp;file_len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 读取文件的大小</span>fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, fp);      <span class="hljs-comment">// 按照字节读取8个bit</span><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (!feof(fp))&#123;    <span class="hljs-built_in">strcat</span>(code_buf, CODE.return_code(char_temp).data());    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strlen</span>(code_buf) &gt;= <span class="hljs-number">8</span>)    &#123;        char_temp = <span class="hljs-string">&#x27;\0&#x27;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)        &#123;            char_temp &lt;&lt;= <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)            &#123;                char_temp |= <span class="hljs-number">1</span>;            &#125;        &#125;        fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 输出</span>        <span class="hljs-built_in">strcpy</span>(code_buf, code_buf + <span class="hljs-number">8</span>);    &#125;    <span class="hljs-keyword">if</span> (feof(fp))        <span class="hljs-keyword">break</span>;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, fp); <span class="hljs-comment">// 读入文件数据</span>&#125;<span class="hljs-comment">// 处理最后不足8位的情况</span>code_len = <span class="hljs-built_in">strlen</span>(code_buf);<span class="hljs-keyword">if</span> (code_len &gt; <span class="hljs-number">0</span>)&#123;    <span class="hljs-built_in">memset</span>(&amp;char_temp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(char_temp));    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; code_len; ++i)    &#123;        char_temp &lt;&lt;= <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)            char_temp |= <span class="hljs-number">1</span>;    &#125;    char_temp &lt;&lt;= <span class="hljs-number">8</span> - code_len;                                            <span class="hljs-comment">// 移动到高位</span>    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// </span>&#125;fclose(fp);fclose(outfile); <span class="hljs-keyword">delete</span>[] data;</code></pre></li><li><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3>　　既然压缩都已经使用了zip的函数名称，此处再次偷懒好了。<br>　　下面是需要使用的临时变量：<pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unzip</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *input, <span class="hljs-keyword">char</span> *output)</span></span>&#123;FILE *inputf=<span class="hljs-literal">NULL</span>, *outputf=<span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> file_len=<span class="hljs-number">0</span>;<span class="hljs-comment">//读入的文件大小</span>    Hufnode *root = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//临时指针</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> node_num=<span class="hljs-number">0</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> code_temp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 缓冲区</span>    byte_fre <span class="hljs-built_in">array</span>[<span class="hljs-number">256</span>];<span class="hljs-comment">//统计权重</span>    inputf = fopen(input, <span class="hljs-string">&quot;rb&quot;</span>);    outputf = fopen(output, <span class="hljs-string">&quot;wb+&quot;</span>);&#125;</code></pre>　　然后是正式读取压缩的文件开始解压。（警告代码并没有验证解压文件是否是上述压缩算法生成的。任意解压会搞出来压缩炸弹）<pre><code class="hljs C++"><span class="hljs-keyword">if</span> (inputf == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span>;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, inputf);<span class="hljs-comment">//先读取字符种类</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i; i &lt; len; i++)    &#123;        fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;<span class="hljs-built_in">array</span>[i].data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf);        fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;<span class="hljs-built_in">array</span>[i].fre, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, inputf);    &#125;    Hufnode data[<span class="hljs-number">256</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <span class="hljs-comment">//collecting data to build huffman tree </span>    &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)        &#123;            data[i].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;            data[i].leaf = <span class="hljs-literal">true</span>;            data[i].Data = <span class="hljs-built_in">array</span>[i].data;        &#125;    &#125;    Hufman CODE;    CODE.build_huf(data, len);<span class="hljs-comment">//根据读入的字节权重重建huffman树</span>    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;file_len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//读取文件大小</span>    root = CODE.return_root();    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> writen_len = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;code_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//每次一个字节进行解压</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)        &#123;            <span class="hljs-keyword">if</span> (code_temp &amp; <span class="hljs-number">128</span>)                root = root-&gt;rc;            <span class="hljs-keyword">else</span>                root = root-&gt;lc;            <span class="hljs-keyword">if</span> (root-&gt;leaf == <span class="hljs-literal">true</span>)            &#123;                fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;root-&gt;Data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outputf);                ++writen_len;                <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)                    <span class="hljs-keyword">break</span>;                 <span class="hljs-comment">// 跳出循环</span>                root = CODE.return_root(); <span class="hljs-comment">// 恢复</span>            &#125;            code_temp &lt;&lt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// switch next bit to the highest</span>        &#125;        <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)            <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 文件大小检测</span>    &#125;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;code_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf);    <span class="hljs-comment">// close the file</span>    fclose(inputf);    fclose(outputf);</code></pre></li><li><h3 id="一个main函数"><a href="#一个main函数" class="headerlink" title="一个main函数"></a>一个main函数</h3>　　这个东西就是个人自行完成了，此处不再粘贴完整的代码。<pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> input[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;, output[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">int</span> opcode = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)    &#123;        welcome();        <span class="hljs-built_in">cin</span> &gt;&gt; opcode;        <span class="hljs-keyword">switch</span> (opcode)<span class="hljs-comment">//three cases</span>        &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//zip</span>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; input;            <span class="hljs-keyword">while</span> (file_name(input) == <span class="hljs-literal">false</span>)            &#123;                <span class="hljs-built_in">cin</span> &gt;&gt; input;                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;            &#125;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; output;            zip(input, output);            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Zip behaviour is complete&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>                 &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//unzip</span>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; input;            <span class="hljs-keyword">while</span> (file_name(input) == <span class="hljs-literal">false</span>)            &#123;                <span class="hljs-built_in">cin</span> &gt;&gt; input;                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;            &#125;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; output;            unzip(input, output);            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Unzip behaviour is complete&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>                 &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//exit</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your Input is not allowed&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li><h3 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h3>　<em> 在代码注释中提及过，解压缩是不能够验证压缩的文件是否是Huffman压缩算法生成的，如果直接解压一个正常的文件，会解压出来一个压缩炸弹或者一个啥也没有。与之配套的压缩算法中也没有加入相应的验证程序。　</em> 没有对单一字节类型进行特化处理，比如说，压缩一个文本全部是“a”的文本文件会丢失数据，因为在建立哈夫曼树的时候没有特化考虑只有一种字节类型的情况，之后修改加入。</li><li><h3 id="没了"><a href="#没了" class="headerlink" title="没了"></a>没了</h3>　　作下此文，只是记一次被迫从零开始完成一个数据结构作业，<em>~diss一下qhy。应该不会有人认出来吧。如果恰巧也是这个老师教学的，~</em><center><font size='0'>最后更新时间：2020年11月1日</font></center></li></ul>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode</title>
    <link href="/peachskin/2020/10/06/vscode/"/>
    <url>/peachskin/2020/10/06/vscode/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>如何让VsCode编写C++/C代码更加高效</font></center><center><font size='0'>就是折腾+摸鱼+折腾</font></center><hr><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="下载安装VsCode"><a href="#下载安装VsCode" class="headerlink" title="下载安装VsCode"></a>下载安装VsCode</h3><p>　　从微软家里搞来一个VsCode的安装包应该不会很难吧、不会吧不会吧…………</p><center> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSMdYGzeQqSW5fcbollGfBqCjs5o0IJ0MIYyg&usqp=CAU" width="70">好吧，还是挂上[链接](https://code.visualstudio.com/)好了。</center>  <p>　　下载好安装包，同意条款，一路直走下一步， 这里没有什么东西可以讲述的，主要就是最后一步，这个一定要点上，不然出什么奇奇怪怪的问题，我也不知道。怎么修复合适，也许<a href="https://www.baidu.com">这里</a>知道怎么修复你的问题，或者是<a href="https://www.google.com">这里</a>. </p><p>　　算了，我还是选择手把手一下吧。<br> <center></p><p><img src="https://pic2.zhimg.com/80/v2-6999967dc8d4d3438879fd15ccaca8e5_720w.jpg">  </p><p>然后选择一个安装位置。我觉得这玩意自己喜欢就好了，装哪里都可以。</p><p><img src="https://pic2.zhimg.com/80/v2-55cb90244dcee54ddc961dacf9f3b06d_720w.jpg">  </p><p>我相信需要这个软件的人一定都不是什么电脑小白吧。不会吧不会吧~  </p><p> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS3j-UQXtTp5DsqUi829BjjjfkyGcpILITS-Q&usqp=CAU" width="450" height="350" >  </p>  <font size='00'>这是一张很模糊的图片，就不要吐槽了 </font></center>  　　如果还是出现了什么莫名其妙的问题，请点击[这里](https://www.baidu.com)。我相信这里一定能解决你所有问题</center>  ### 编译环境  * #### windows系统  　　在Windows环境下推荐[MinGW](http://www.mingw.org/)，这是一个官网，当然如果上不了可以来看另外一个绿色安装包[sourceforge](https://sourceforge.net/projects/mingw-w64/files/)（这个网站是国外网站，访问速度有点漫长，下载速度也是），下载最新版本的“x86_64-posix-seh”这个压缩包。解压后把里面“bin”文件夹加入到系统环境变量就行。<font size='6'><font color="red">  　　一定要重启  　　一定要重启  　　一定要重启  　　重要的事情说3遍  </font></font>  　　安装完成之后，还需要添加到系统的环境变量，有的重启之后才能起作用（不重启当然也能用，但是出现什么奇奇怪怪的bug就不知道了）。  　　检验GCC编译器是否安装正确。打开命令行(点击开始菜单 -> 运行，输入cmd.exe后确定)<pre><code class="hljs cmd"><span class="hljs-number">1</span> | gcc -v</code></pre>　　如果能够看到GCC的版本信息，那么恭喜你安装完成，如果没有，请点击[这里](https://www.baidu.com)。如果上面的方法不行，此处另外加载的一个方法（使用带的安装管理器），在[sourceforge的mingw](https://link.zhihu.com/?target=https%3A//sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/)，下载x64的版本，可以直接打开进行安装。这里是我的选择：版本选择最新的版本，（PS：如果是linux一定要选择poisx）,32位的电脑就选择x86，64位电脑就选择x64，最后一项只能选择“0”。<center><img src="https://pic1.zhimg.com/80/v2-3aae1eb09e5b78b306706ee3ed8693ac_720w.jpg"></center>  　　这里在选择安装位置的时候记得要避开中文路径和中文字符的路径。  <center><img src="https://pic3.zhimg.com/80/v2-ccdc30f87b6ebcd77858122300c7c04a_720w.jpg"></center>  * #### Linux系统  　　这个的话就很好办了，打开终端ctrl ＋ Alt + T，输入命令  <pre><code class="hljs bash">$ sudo apt update$ sudo apt install gcc$ sudo apt install g++                       PS:有些时候不会自己安装上G++进而出现C++编译不了就难顶(通常不太会)</code></pre>　　等待安装完成，同样可以在终端输入<pre><code class="hljs bash">$ gcc -v</code></pre>　　检查安装是否完成  * 其实在window上也可以使用上面的方法  　　首先你需要准备好一个[WSL](https://docs.microsoft.com/zh-cn/windows/wsl/install-manual)，之后的安装方法和linux上一样。算了，还是找到了一篇安装[教程](https://www.jianshu.com/p/3e627ff45ccb)  　　然后在vscode上安装插件[Remote-WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)，还是去VsCode的自带插件商店上去找吧。* 关于GCC的发展史可以去看：[鸟哥的Linux私房菜](http://cn.linux.vbird.org/linux_basic/0110whatislinux_1.php)  ### 配置F5自动运行~#### 　launch.json编写* 这是window的  <pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;(gdb) Launch&quot;</span>,        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,        <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,        <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,        <span class="hljs-attr">&quot;args&quot;</span>: [            <span class="hljs-string">&quot;/K&quot;</span>,            <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,            <span class="hljs-string">&quot;&amp;&quot;</span>,            <span class="hljs-string">&quot;echo.&quot;</span>,            <span class="hljs-string">&quot;&amp;&quot;</span>,            <span class="hljs-string">&quot;pause&quot;</span>        ],        <span class="hljs-attr">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,        <span class="hljs-attr">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,        &quot;miDebuggerPath&quot;: &quot;盘符:/修改为自己的MinGW安装路径/gdb.exe&quot;,    （记得修改他）        &quot;setupCommands&quot;: [            &#123;                <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span>,                <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,                <span class="hljs-attr">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>            &#125;        ],        &quot;preLaunchTask&quot;: &quot;Build&quot;//要和task.json中的label标签一致    &#125;,      ]&#125;</code></pre>* #### 　然后是tasks.json<pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,//一定要注意和launch.json中的prelaunchtask内容一致            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;g++&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;-Wall&quot;</span>,                <span class="hljs-string">&quot;-std=c++11&quot;</span>,                <span class="hljs-string">&quot;-lm&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>            ],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;echo&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: &#123;                <span class="hljs-string">&quot;owner&quot;</span>: <span class="hljs-string">&quot;cpp&quot;</span>,                <span class="hljs-string">&quot;fileLocation&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,                <span class="hljs-string">&quot;pattern&quot;</span>: &#123;                    <span class="hljs-string">&quot;regexp&quot;</span>: <span class="hljs-string">&quot;^(.*):(\\d+):(\\d+):\\s+(error):\\s+(.*)$&quot;</span>,                    <span class="hljs-string">&quot;file&quot;</span>: 1,                    <span class="hljs-string">&quot;line&quot;</span>: 2,                    <span class="hljs-string">&quot;column&quot;</span>: 3,                    <span class="hljs-string">&quot;severity&quot;</span>: 4,                    <span class="hljs-string">&quot;message&quot;</span>: 5                &#125;            &#125;        &#125;,        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Run&quot;</span>,            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-string">&quot;dependsOn&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: [],            <span class="hljs-string">&quot;group&quot;</span>: &#123;                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　当然以上文件其实也可以直接使用vscode自动生成的，只要修改了对应的文件路径就可以了。~~此处只是放上了我的配置，理论上直接套用没有问题，实际没有测试过（逃） ~~　　实际测试下来，总是会有一些奇奇怪怪的不能够完全运行的结果。但是至少能够编译了不是？　　* Linux的　　其实也不难，修改中文的路径为对应的GDB路径就行了，此处不再粘贴代码  算了，我还是粘贴一段吧(launch.json)<pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;g++ - 生成和调试活动文件&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>,            <span class="hljs-attr">&quot;args&quot;</span>: [],            <span class="hljs-attr">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,            <span class="hljs-attr">&quot;environment&quot;</span>: [],            <span class="hljs-attr">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,            <span class="hljs-attr">&quot;setupCommands&quot;</span>: [                &#123;                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span>,                    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>                &#125;            ],            <span class="hljs-attr">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span>         &#125;    ]&#125;</code></pre>然后是task.json<pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;/usr/bin/g++&quot;</span>,            <span class="hljs-attr">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>            ],            <span class="hljs-attr">&quot;options&quot;</span>: &#123;                <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>            &#125;,            <span class="hljs-attr">&quot;problemMatcher&quot;</span>: [                <span class="hljs-string">&quot;$gcc&quot;</span>            ],            <span class="hljs-attr">&quot;group&quot;</span>: &#123;                <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,                <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　这个就不管他gdb的位置了，反正都是错不了的。应该吧……## 插件拓展<font size="3"> 　插件啊，看得见左侧那个小玩意不</font><center>不出意外的话点击左侧工具栏最底下的那个像微软徽标的四个“小框框”就是了。</center>  *以下插件仅是我个人推荐*### 　1.C++ Intelligence<center><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcToK7QWvWNkTKH_PBsAqnWcOib9eOUenJhMwQ&usqp=CAU"><font size="4">　　没错，就是这个图标的玩意。如果是学习配置C++的话，这个即便你不去找，vscode也会自动为你推荐这个插件。通常来说不用慌找不到。</font>  <font size="0">  　　*~~其实作者自己也没有什么使用感受，它有什么用~~* （误）</font></center>### 　2.Chinese (Simplified)　　我相信一开始打开Vscode的同学都是崩溃的，特别是英语水平不怎么样的。那么这个插件就是救星。<center>  <img src='https://ae04.alicdn.com/kf/H9b29c9f660f44b11a77406cc21a40363t.jpg'></center>　　安装好了以后，重启一下VsCode就完成了### 　3.GBK To UTF8  　　如果在c++文件中有中文字符，你可能会看见保存之前所有中文字符的地方变成乱码了，这个时候，就需要他来救驾。当然反过来的设计似乎还没有，要是想要能够在CMD中正确输出，建议再打码开始之前就是修改字符编码方式为“GBK”### 　4.vscode-icons　　没啥，就是我一直在使用的图标包，其实是挺好看的。具体的使用方法在其官网和上已经写的非常清楚了，点击[这里](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)前往### 　5.C/C++ GUN global　　提升你代码效率的好帮手，能够快速定位到函数、变量的声明区。同时在打码的时候还可以自动提示当前类有什么成员函数、成员变量。[这里](https://marketplace.visualstudio.com/items?itemName=jaycetyle.vscode-gnu-global)是关于它的详细说明。<font size='0'><center>图先欠着</center></font><h3 id="6-GlassIt-VSC"><a href="#6-GlassIt-VSC" class="headerlink" title="　6.GlassIt-VSC"></a>　6.GlassIt-VSC</h3><p>　　让你的vscode透明，其实就是一个美化插件啦，要注意一件事情，就是安装好了之后，vscode会一直提醒你软件损坏，需要重新安装，其实是没毛病的，不要慌。这是为了美化（折腾）必须要经历的事情。vscode升级之后美化会继续存在，提示也会消失，插件也会不见，不知道是什么原因。</p><p>  补充一个链接：<a href="https://marketplace.visualstudio.com/items?itemName=s-nlf-fh.glassit">在这里，不用找了</a>，最好的方法当然是在Vscode中找，能够直接安装上去，减少debug时间。</p><h3 id="7-background"><a href="#7-background" class="headerlink" title="　7.background"></a>　7.background</h3><p>　　话不多说，直接上图，都是<a href="https://marketplace.visualstudio.com/items?itemName=shalldie.background">老二刺螈</a>了<br>  <center><img src='https://user-images.githubusercontent.com/9987486/40583705-7105dda8-61c6-11e8-935a-3c5d475a1eb1.gif'></center></p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>　　VsCode的更高阶用法应该还是在linux上，Windows10为我们提供了好用的WSL子系统，VsCode上同样也有合适的插件启用它。不过因为各种不可抗力的原因阻挡，在windows10上表现良好的VsCode在WSL上十分拉胯，比如输入一行的自动格式化，总是比windows系统上慢，同样的代码补全机制，在WSL上C/C++ GUN global总是会不能够正常的运行。还是希望有高人已经解决，能提交一篇解决的文章最好了。</p><center><font size='0'>*~~这个坑什么时候填我也不知道~~*(不是)  最后更新时间：2020年11月16日19:01:12</font></center>]]></content>
    
    
    
    <tags>
      
      <tag>help</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/peachskin/2020/10/01/hello-world/"/>
    <url>/peachskin/2020/10/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="建立新的博客页"><a href="#建立新的博客页" class="headerlink" title="建立新的博客页"></a>建立新的博客页</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="在本地查看运行效果"><a href="#在本地查看运行效果" class="headerlink" title="在本地查看运行效果"></a>在本地查看运行效果</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code class="hljs bash">$ hexo generate$ sudo rm -rf ~/*</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署上去"><a href="#部署上去" class="headerlink" title="部署上去"></a>部署上去</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="我的参考资料"><a href="#我的参考资料" class="headerlink" title="我的参考资料"></a>我的参考资料</h3><p>From info: <a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">Here</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>just soso</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
