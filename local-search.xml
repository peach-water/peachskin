<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Download</title>
    <link href="/peachskin/2020/11/01/download/"/>
    <url>/peachskin/2020/11/01/download/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>就算是摸鱼也要好好的摸</font></center><h2 id="好软推荐"><a href="#好软推荐" class="headerlink" title="好软推荐"></a>好软推荐</h2><ul><li><p>一个好使的图片浏览器：<a href="https://tw.bandisoft.com/honeyview/">honeyview</a><br>　　烦恼微软家自带的图片浏览器难用？苦于自带的图片浏览器打开速度总是捉急？那么它必然是一个好选择。</p></li><li><p>既然都有图片了，怎么能够没有一个优秀的视频播放器：<a href="https://potplayer.en.softonic.com/">PotPlayer</a><br>　　光这个其实还不能够说明它的强大之处，<del>你可能只会觉得他是一个外观丑陋的视频播放器，搭配上一个神秘的网址，你就能够观看全球电视直播，至少国内中央台都是可以看的</del>除此之外就是，好看无边框（需要手动设置一下），如果下载不到，在scoop里面试试？</p></li><li><p>文件资源浏览器推荐：<a href="http://qttabbar.sourceforge.net/">QTTabBar</a><br>　　虽然不是很好看，甚至可以说加的内容还有一些丑陋，但是就那一点能够支持新建标签页，我就觉得比自带的文件浏览器好使。至少不用再很多个不知道所以的窗口中寻寻觅觅，最最最重要的是支持在此处打开CMD，这实在是好使。</p></li><li><p>软件卸载器：<a href="https://www.iobit.com/en/index.php">IOBit Uninstall</a><br>　　还是弥补自带的软件卸载的不足，自带的能卸载软件，对！就是能够卸载软件，至于软件留下来的数据，抱歉一概不会删除。这个时候就需要请出来它。对了有些时候并不是所有的都软件卸载都需要清理数据文件，还是在清理之前好做思考。除此之外就是普通版本已经足够普通人日常使用，没有加钱上专业版的必要（当然是可以去支持一下的啦~）</p></li><li><p>重装系统的工具：<a href="http://www.wepe.com.cn/">微PE</a><br>　　重装系统当然推荐，虽然现在有点变化，开始收费了。但是至少不流氓，而且收费也不算太贵，其实吧，就算买一个软碟通也不见得能够有多少便宜（支持一下良心开发者呗）。有了它，从此之后获得一U在手，天下我有；打开女生宿舍大门的万能钥匙；万能的工具人（误）等等称号</p></li><li><p>宇宙最强IDE：<a href="https://peach-water.github.io/peachskin/2020/10/11/vscode/">VsCode</a>  </p></li><li><p>美化桌面的方法：<a href="https://www.rainmeter.net/">Rainmeter</a><br>　　能够做到什么样子完全看自己折腾能力，最好当然是自己慢慢设计~<br>　　建议搭配贴吧上一个<a href="http://tieba.baidu.com/p/2085771413?see_lz=1">资源帖子</a>实现</p></li><li><p>一个小白向写镜像工具：<a href="https://www.balena.io/etcher/">balenaEtcher</a><br>　　我记得是大部分的镜像都可以写，更更更重要的是真的小白向，哪怕你完全不知道怎么操作，对于不同系统的镜像无所适从，都不要担心，这个可以解决你的问题。</p><center><img src="https://www.balena.io/static/steps-8006dca57323756b1b84fb9408742409.gif"></center></li><li><p>强大的windows包管理器：<a href="https://scoop.sh/">SCOOP</a><br>　　linux有apt包管理器，MAC有homebrew，大名鼎鼎的windows呢？怎么能够没有一个合适的包管理器？于是scoop应运而生，再也不用为windows环境下安装C++环境或者各种环境发愁了，连同加入PATH一起完成。<br>　　网址中有简要的安装方法，如果不行，没关系，<del>百度有非常多的方法帮助你解决所有问题</del>也许应该检查一下是不是管理员身份（我说的只是也许啊，至少，人不能，不应该）。</p></li></ul><h2 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h2><ul><li>GAYHUB，全球最大的代码交流平台：<a href="https://github.com/">Github</a></li><li>桌面美化教程资源：<a href="https://zhutix.com/tag/10s/">致美化</a></li><li>程序员工具：<a href="http://t.swifty.cc/md5/index.html">在线加密解密工具</a></li><li>域名查询、IP4查询：<a href="https://site.ip138.com/">其实不止从域名查IP4</a></li></ul><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><center><font size = '0'>最后更新时间2020年10月25日22:24</font></center>]]></content>
    
    
    
    <tags>
      
      <tag>source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Huffman</title>
    <link href="/peachskin/2020/11/01/Huffman/"/>
    <url>/peachskin/2020/11/01/Huffman/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>使用Huffman编码实现一个压缩和解压缩软件</font></center>  <h2 id="初识Huffman"><a href="#初识Huffman" class="headerlink" title="初识Huffman"></a>初识Huffman</h2><p>　　简单说明一下Huffman编码的原理<br>  　　实现霍夫曼编码的方式主要是创建一个二叉树和其节点。这些树的节点可以存储在数组里，数组的大小为符号（symbols）数的大小n，而节点分别是终端节点（叶节点）与非终端节点（内部节点）。</p><p>　　一开始，所有的节点都是终端节点，节点内有三个字段：</p><p>　　1.符号（Symbol）</p><p>　　2.权重（Weight、Probabilities、Frequency）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　而非终端节点内有四个字段：</p><p>　　1.权重（Weight、Probabilities、Frequency）</p><p>　　2.指向两个子节点的 链接（Links to two child node）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　基本上，我们用’0’与’1’分别代表指向左子节点与右子节点，最后为完成的二叉树共有n个终端节点与n-1个非终端节点，去除了不必要的符号并产生最佳的编码长度。</p><p>　　过程中，每个终端节点都包含着一个权重（Weight、Probabilities、Frequency），两两终端节点结合会产生一个新节点，新节点的权重是由两个权重最小的终端节点权重之总和，并持续进行此过程直到只剩下一个节点为止。</p><p>　　实现霍夫曼树的方式有很多种，可以使用优先队列（Priority Queue）简单达成这个过程，给与权重较低的符号较高的优先级（Priority），算法如下：</p><p>　　⒈把n个终端节点加入优先队列，则n个节点都有一个优先权Pi，1 ≤ i ≤ n</p><p>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列中移除两个最小的Pi节点，即连续做两次remove（min（Pi）, Priority_Queue)<br>　　　⑵产生一个新节点，此节点为（1）之移除节点之父节点，而此节点的权重值为（1）两节点之权重和<br>　　　⑶把（2）产生之节点加入优先队列中<br>　　⒊最后在优先队列里的点为树的根节点（root）<br>　　<br>　　而此算法的时间复杂度（ Time Complexity）为O（n log n）；因为有n个终端节点，所以树总共有2n-1个节点，使用优先队列每个循环须O（log n）。</p><p>　　此外，有一个更快的方式使时间复杂度降至线性时间（Linear Time）O（n），就是使用两个队列（Queue）创件霍夫曼树。第一个队列用来存储n个符号（即n个终端节点）的权重，第二个队列用来存储两两权重的合（即非终端节点）。此法可保证第二个队列的前端（Front）权重永远都是最小值，且方法如下：</p><p>　　⒈把n个终端节点加入第一个队列（依照权重大小排列，最小在前端）<br>　<br>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列前端移除两个最低权重的节点<br>　　　⑵将（1）中移除的两个节点权重相加合成一个新节点<br>　　　⑶加入第二个队列<br>　　⒊最后在第一个队列的节点为根节点</p><p>　　虽然使用此方法比使用优先队列的时间复杂度还低，但是注意此法的第1项，节点必须依照权重大小加入队列中，如果节点加入顺序不按大小，则需要经过排序，则至少花了O（n log n）的时间复杂度计算。</p><p>　　但是在不同的状况考量下，时间复杂度并非是最重要的，如果我们今天考虑英文字母的出现频率，变量n就是英文字母的26个字母，则使用哪一种算法时间复杂度都不会影响很大，因为n不是一笔庞大的数字。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li><h3 id="关于Huffman节点的定义"><a href="#关于Huffman节点的定义" class="headerlink" title="关于Huffman节点的定义"></a>关于Huffman节点的定义</h3><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span>&#123;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span> *<span class="hljs-title">lc</span>;</span><span class="hljs-comment">//左右子树</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hufnode</span> *<span class="hljs-title">rc</span>;</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">pow</span>;<span class="hljs-comment">//当前节点的权重</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> Data;<span class="hljs-comment">//这个节点如果是叶子结点，那么存储编码对应的字符</span>    <span class="hljs-keyword">bool</span> leaf;<span class="hljs-comment">//标记是否是字符</span>    <span class="hljs-built_in">string</span> code;<span class="hljs-comment">//存储对应的Huffman编码</span>    Hufnode() : lc(<span class="hljs-literal">NULL</span>), rc(<span class="hljs-literal">NULL</span>), leaf(<span class="hljs-literal">true</span>)&#123;&#125;<span class="hljs-comment">//初始化节点</span>&#125;</code></pre><p>除此之外我们还需要实现一些节点赋值的操作符重载，方便赋值</p><pre><code class="hljs C++"><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span>=(Hufnode *oth)<span class="hljs-comment">//重载等于号的意义非常重大</span>&#123;    <span class="hljs-keyword">this</span>-&gt;code = oth-&gt;code;    <span class="hljs-keyword">this</span>-&gt;Data = oth-&gt;Data;    <span class="hljs-keyword">this</span>-&gt;lc = oth-&gt;lc;    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pow</span> = oth-&gt;<span class="hljs-built_in">pow</span>;    <span class="hljs-keyword">this</span>-&gt;rc = oth-&gt;rc;    <span class="hljs-keyword">this</span>-&gt;leaf = oth-&gt;leaf;&#125;<span class="hljs-keyword">operator</span> Hufnode *()<span class="hljs-comment">//同样的，重载Hufnode到Hufnide*</span>&#123;    Hufnode *res = <span class="hljs-keyword">new</span> Hufnode;    res-&gt;Data = <span class="hljs-keyword">this</span>-&gt;Data;    res-&gt;<span class="hljs-built_in">pow</span> = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pow</span>;    res-&gt;code = <span class="hljs-keyword">this</span>-&gt;code;    res-&gt;lc = <span class="hljs-keyword">this</span>-&gt;lc;    res-&gt;leaf = <span class="hljs-keyword">this</span>-&gt;leaf;    res-&gt;rc = <span class="hljs-keyword">this</span>-&gt;rc;    <span class="hljs-keyword">return</span> res;&#125;</code></pre></li><li><h3 id="实现Huffman树的构建"><a href="#实现Huffman树的构建" class="headerlink" title="实现Huffman树的构建"></a>实现Huffman树的构建</h3><p>　　根据开头介绍的两种方法，各有千秋，其中我们使用比较容易理解的方法，此处不使用优先队列等等优化性的算法，转向使用冒泡排序，因为排序的内容不算多，而且在第一次排序完成之后不会有较多的排序要求，我们可以通过对冒泡优化加快速度（使其变成一个插入算法）。<br>　　此处实现一个class类，负责实现Huffman树的构建和相关</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hufman</span>&#123;</span><span class="hljs-keyword">private</span>:    Hufnode * root<span class="hljs-comment">//记录下Huffman树的根节点</span>        <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>, <span class="hljs-built_in">string</span>&gt; code_map<span class="hljs-comment">//用来快速访问字符对应的Huffman编码</span>&#125;</code></pre><p>　然后我们需要实现一些相关的函数来完善这样一个Huffman类</p><pre><code class="hljs C++"><span class="hljs-function">Hufnode *<span class="hljs-title">return_root</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//获得当前Huffman树的根节点</span><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pow_len</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//返回文件拥有的字符数量  </span><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">return_code</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-comment">//根据字符返回对应的Huffman编码  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(Hufnode *root)</span></span>;    <span class="hljs-comment">//递归调用，解构函数</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build_huf</span><span class="hljs-params">(Hufnode data[], <span class="hljs-keyword">int</span> size)</span></span>;<span class="hljs-comment">//构建Huffman树，输入的是节点数量和节点  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update_code</span><span class="hljs-params">(Hufnode *root, <span class="hljs-built_in">string</span> fa, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *c)</span></span>;<span class="hljs-comment">//根据建立的Huffman树，递归给每一个字符生成Huffman编码  </span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bob_sort</span><span class="hljs-params">(Hufnode data[], <span class="hljs-keyword">int</span> size)</span></span>;<span class="hljs-comment">//优化过的冒泡排序  </span></code></pre></li><li><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>　　<font size='4'>任务挺多，都是是需要单独实现的东西：  </font></p><ul><li>关于需要被压缩的文件读入，输出的文件格式；</li><li>读入字符统计不同字符出现的次数；</li><li>把编码后的文件写入到输出文件当中；</li><li>特殊情况处理：最后字符不是完整的字节</li></ul><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">zip</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *input, <span class="hljs-keyword">char</span> *output)</span></span>&#123;<span class="hljs-comment">//此处偷懒用一用ZIP命名不会出事吧，不会吧</span>FILE *fp = <span class="hljs-literal">NULL</span>, *outfile = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//文件输入和输出</span>  byte_fre <span class="hljs-built_in">array</span>[<span class="hljs-number">256</span>];<span class="hljs-comment">//用二进制方式读入文件，可以实现对所有格式文件兼容，开256个空间是因为只有256种不同的字节。</span>  Hufnode *data;<span class="hljs-comment">//Huffman建树的临时缓冲区</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> char_temp = <span class="hljs-number">0</span>;<span class="hljs-comment">//字节操作文件的缓冲区</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> code_len = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录文件长度</span>  data = <span class="hljs-keyword">new</span> Hufnode[<span class="hljs-number">256</span>];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)      <span class="hljs-built_in">array</span>[i].data = i;  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> buffer[MAX_LINE];  buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;</code></pre><p>　　在上面初始化zip压缩函数，然后开始读入文件，求解统计整个文件不同字节权值。  </p><pre><code class="hljs C++"><span class="hljs-keyword">while</span> (!feof(fp) &amp;&amp; fread(buffer, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, fp))&#123;    <span class="hljs-keyword">int</span> a = buffer[<span class="hljs-number">0</span>];    <span class="hljs-built_in">array</span>[a].fre++;<span class="hljs-comment">//统计不同的字节权值</span>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">//搜集权值用来构建hafuman树 </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)    &#123;        data[len].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;        data[len].leaf = <span class="hljs-literal">true</span>;        data[len++].Data = <span class="hljs-built_in">array</span>[i].data;    &#125;&#125;Hufman CODE;CODE.build_huf(data, len); <span class="hljs-comment">//此处调用hufman类里面的建树</span>len = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) <span class="hljs-comment">// 为了在元数据写入不同字节权重</span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)    &#123;        data[len].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;        data[len].leaf = <span class="hljs-literal">true</span>;        data[len++].Data = <span class="hljs-built_in">array</span>[i].data;    &#125;&#125;outfile = fopen(output, <span class="hljs-string">&quot;wb+&quot;</span>);fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, outfile);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;data[i].Data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile);    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;data[i].<span class="hljs-built_in">pow</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, outfile);&#125;<span class="hljs-keyword">char</span> code_buf[<span class="hljs-number">256</span>] = <span class="hljs-string">&quot;\0&quot;</span>; <span class="hljs-comment">// </span>rewind(fp);<span class="hljs-keyword">int</span> file_len = CODE.pow_len();fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *)&amp;file_len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 读取文件的大小</span>fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, fp);      <span class="hljs-comment">// 按照字节读取8个bit</span><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (!feof(fp))&#123;    <span class="hljs-built_in">strcat</span>(code_buf, CODE.return_code(char_temp).data());    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strlen</span>(code_buf) &gt;= <span class="hljs-number">8</span>)    &#123;        char_temp = <span class="hljs-string">&#x27;\0&#x27;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)        &#123;            char_temp &lt;&lt;= <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)            &#123;                char_temp |= <span class="hljs-number">1</span>;            &#125;        &#125;        fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// 输出</span>        <span class="hljs-built_in">strcpy</span>(code_buf, code_buf + <span class="hljs-number">8</span>);    &#125;    <span class="hljs-keyword">if</span> (feof(fp))        <span class="hljs-keyword">break</span>;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, fp); <span class="hljs-comment">// 读入文件数据</span>&#125;<span class="hljs-comment">// 处理最后不足8位的情况</span>code_len = <span class="hljs-built_in">strlen</span>(code_buf);<span class="hljs-keyword">if</span> (code_len &gt; <span class="hljs-number">0</span>)&#123;    <span class="hljs-built_in">memset</span>(&amp;char_temp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(char_temp));    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; code_len; ++i)    &#123;        char_temp &lt;&lt;= <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (code_buf[i] == <span class="hljs-string">&#x27;1&#x27;</span>)            char_temp |= <span class="hljs-number">1</span>;    &#125;    char_temp &lt;&lt;= <span class="hljs-number">8</span> - code_len;                                            <span class="hljs-comment">// 移动到高位</span>    fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;char_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outfile); <span class="hljs-comment">// </span>&#125;fclose(fp);fclose(outfile); <span class="hljs-keyword">delete</span>[] data;</code></pre></li><li><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><p>　　既然压缩都已经使用了zip的函数名称，此处再次偷懒好了。<br>　　下面是需要使用的临时变量：</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unzip</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *input, <span class="hljs-keyword">char</span> *output)</span></span>&#123;FILE *inputf=<span class="hljs-literal">NULL</span>, *outputf=<span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> file_len=<span class="hljs-number">0</span>;<span class="hljs-comment">//读入的文件大小</span>    Hufnode *root = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//临时指针</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> node_num=<span class="hljs-number">0</span>;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> code_temp = <span class="hljs-number">0</span>; <span class="hljs-comment">// 缓冲区</span>    byte_fre <span class="hljs-built_in">array</span>[<span class="hljs-number">256</span>];<span class="hljs-comment">//统计权重</span>    inputf = fopen(input, <span class="hljs-string">&quot;rb&quot;</span>);    outputf = fopen(output, <span class="hljs-string">&quot;wb+&quot;</span>);&#125;</code></pre><p>　　然后是正式读取压缩的文件开始解压。（警告代码并没有验证解压文件是否是上述压缩算法生成的。任意解压会搞出来压缩炸弹）</p><pre><code class="hljs C++"><span class="hljs-keyword">if</span> (inputf == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span>;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, inputf);<span class="hljs-comment">//先读取字符种类</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i; i &lt; len; i++)    &#123;        fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;<span class="hljs-built_in">array</span>[i].data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf);        fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)&amp;<span class="hljs-built_in">array</span>[i].fre, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-number">1</span>, inputf);    &#125;    Hufnode data[<span class="hljs-number">256</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <span class="hljs-comment">//collecting data to build huffman tree </span>    &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i].fre &gt; <span class="hljs-number">0</span>)        &#123;            data[i].<span class="hljs-built_in">pow</span> = <span class="hljs-built_in">array</span>[i].fre;            data[i].leaf = <span class="hljs-literal">true</span>;            data[i].Data = <span class="hljs-built_in">array</span>[i].data;        &#125;    &#125;    Hufman CODE;    CODE.build_huf(data, len);<span class="hljs-comment">//根据读入的字节权重重建huffman树</span>    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;file_len, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//读取文件大小</span>    root = CODE.return_root();    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> writen_len = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;code_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf); <span class="hljs-comment">//每次一个字节进行解压</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i)        &#123;            <span class="hljs-keyword">if</span> (code_temp &amp; <span class="hljs-number">128</span>)                root = root-&gt;rc;            <span class="hljs-keyword">else</span>                root = root-&gt;lc;            <span class="hljs-keyword">if</span> (root-&gt;leaf == <span class="hljs-literal">true</span>)            &#123;                fwrite((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;root-&gt;Data, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, outputf);                ++writen_len;                <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)                    <span class="hljs-keyword">break</span>;                 <span class="hljs-comment">// 跳出循环</span>                root = CODE.return_root(); <span class="hljs-comment">// 恢复</span>            &#125;            code_temp &lt;&lt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// switch next bit to the highest</span>        &#125;        <span class="hljs-keyword">if</span> (writen_len &gt;= file_len)            <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 文件大小检测</span>    &#125;    fread((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)&amp;code_temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>), <span class="hljs-number">1</span>, inputf);    <span class="hljs-comment">// close the file</span>    fclose(inputf);    fclose(outputf);</code></pre></li><li><h3 id="一个main函数"><a href="#一个main函数" class="headerlink" title="一个main函数"></a>一个main函数</h3><p>　　这个东西就是个人自行完成了，此处不再粘贴完整的代码。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> input[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;, output[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">int</span> opcode = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)    &#123;        welcome();        <span class="hljs-built_in">cin</span> &gt;&gt; opcode;        <span class="hljs-keyword">switch</span> (opcode)<span class="hljs-comment">//three cases</span>        &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//zip</span>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; input;            <span class="hljs-keyword">while</span> (file_name(input) == <span class="hljs-literal">false</span>)            &#123;                <span class="hljs-built_in">cin</span> &gt;&gt; input;                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;            &#125;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; output;            zip(input, output);            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Zip behaviour is complete&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>                 &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//unzip</span>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of input&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; input;            <span class="hljs-keyword">while</span> (file_name(input) == <span class="hljs-literal">false</span>)            &#123;                <span class="hljs-built_in">cin</span> &gt;&gt; input;                <span class="hljs-keyword">if</span> (input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; input[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;            &#125;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your file name of output&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-built_in">cin</span> &gt;&gt; output;            unzip(input, output);            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Unzip behaviour is complete&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>                 &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//exit</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Your Input is not allowed&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li><h3 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h3><p>　* 在代码注释中提及过，解压缩是不能够验证压缩的文件是否是Huffman压缩算法生成的，如果直接解压一个正常的文件，会解压出来一个压缩炸弹或者一个啥也没有。与之配套的压缩算法中也没有加入相应的验证程序。<br>　* 没有对单一字节类型进行特化处理，比如说，压缩一个文本全部是“a”的文本文件会丢失数据，因为在建立哈夫曼树的时候没有特化考虑只有一种字节类型的情况，之后修改加入。</p></li><li><h3 id="没了"><a href="#没了" class="headerlink" title="没了"></a>没了</h3><p>　　作下此文，只是记一次被迫从零开始完成一个数据结构作业，*<del>diss一下qhy。应该不会有人认出来吧。如果恰巧也是这个老师教学的，</del>*</p><center><font size='0'>最后更新时间：2020年11月1日</font></center></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>help</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode</title>
    <link href="/peachskin/2020/10/06/vscode/"/>
    <url>/peachskin/2020/10/06/vscode/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>如何让VsCode编写C++/C代码更加高效</font></center><center><font size='0'>就是折腾+摸鱼+折腾</font></center><hr><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="下载安装VsCode"><a href="#下载安装VsCode" class="headerlink" title="下载安装VsCode"></a>下载安装VsCode</h3><p>　　从微软家里搞来一个VsCode的安装包应该不会很难吧、不会吧不会吧…………</p><center> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSMdYGzeQqSW5fcbollGfBqCjs5o0IJ0MIYyg&usqp=CAU" width="70"><p>好吧，还是挂上<a href="https://code.visualstudio.com/">链接</a>好了。</p></center>  <p>　　下载好安装包，同意条款，一路直走下一步， 这里没有什么东西可以讲述的，主要就是最后一步，这个一定要点上，不然出什么奇奇怪怪的问题，我也不知道。怎么修复合适，也许<a href="https://www.baidu.com/">这里</a>知道怎么修复你的问题，或者是<a href="https://www.google.com/">这里</a>. </p><p>　　算了，我还是选择手把手一下吧。<br> <center></p><img src="https://pic2.zhimg.com/80/v2-6999967dc8d4d3438879fd15ccaca8e5_720w.jpg">  <p>然后选择一个安装位置。我觉得这玩意自己喜欢就好了，装哪里都可以。</p><img src="https://pic2.zhimg.com/80/v2-55cb90244dcee54ddc961dacf9f3b06d_720w.jpg">  <p>我相信需要这个软件的人一定都不是什么电脑小白吧。不会吧不会吧~  </p> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS3j-UQXtTp5DsqUi829BjjjfkyGcpILITS-Q&usqp=CAU" width="450" height="350" >  <p>  <font size='00'>这是一张很模糊的图片，就不要吐槽了 </font></center><br>　　如果还是出现了什么莫名其妙的问题，请点击<a href="https://www.baidu.com/">这里</a>。我相信这里一定能解决你所有问题</center>  </p><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li><h4 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h4>　　在Windows环境下推荐<a href="http://www.mingw.org/">MinGW</a>，这是一个官网，当然如果上不了可以来看另外一个绿色安装包<a href="https://sourceforge.net/projects/mingw-w64/files/">sourceforge</a>（这个网站是国外网站，访问速度有点漫长，下载速度也是），下载最新版本的“x86_64-posix-seh”这个压缩包。解压后把里面“bin”文件夹加入到系统环境变量就行。<br><font size='6'><font color="red"><br>　　一定要重启<br>　　一定要重启<br>　　一定要重启<br>　　重要的事情说3遍  </font></font><br>　　安装完成之后，还需要添加到系统的环境变量，有的重启之后才能起作用（不重启当然也能用，但是出现什么奇奇怪怪的bug就不知道了）。<br>　　检验GCC编译器是否安装正确。打开命令行(点击开始菜单 -&gt; 运行，输入cmd.exe后确定)<pre><code class="hljs cmd"><span class="hljs-number">1</span> | gcc -v</code></pre></li></ul><p>　　如果能够看到GCC的版本信息，那么恭喜你安装完成，如果没有，请点击<a href="https://www.baidu.com/">这里</a>。如果上面的方法不行，此处另外加载的一个方法（使用带的安装管理器），在<a href="https://link.zhihu.com/?target=https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">sourceforge的mingw</a>，下载x64的版本，可以直接打开进行安装。这里是我的选择：版本选择最新的版本，（PS：如果是linux一定要选择poisx）,32位的电脑就选择x86，64位电脑就选择x64，最后一项只能选择“0”。</p><center><img src="https://pic1.zhimg.com/80/v2-3aae1eb09e5b78b306706ee3ed8693ac_720w.jpg"></center>  <p>　　这里在选择安装位置的时候记得要避开中文路径和中文字符的路径。  </p><center><img src="https://pic3.zhimg.com/80/v2-ccdc30f87b6ebcd77858122300c7c04a_720w.jpg"></center>  <ul><li><h4 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h4><p>　　这个的话就很好办了，打开终端ctrl ＋ Alt + T，输入命令  </p><pre><code class="hljs bash">$ sudo apt update$ sudo apt install gcc$ sudo apt install g++                       PS:有些时候不会自己安装上G++进而出现C++编译不了就难顶(通常不太会)</code></pre><p>　　等待安装完成，同样可以在终端输入</p><pre><code class="hljs bash">$ gcc -v</code></pre><p>　　检查安装是否完成  </p></li><li><p>其实在window上也可以使用上面的方法<br>　　首先你需要准备好一个<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL</a>，之后的安装方法和linux上一样。算了，还是找到了一篇安装<a href="https://www.jianshu.com/p/3e627ff45ccb">教程</a><br>　　然后在vscode上安装插件<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">Remote-WSL</a>，还是去VsCode的自带插件商店上去找吧。</p></li><li><p>关于GCC的发展史可以去看：<a href="http://cn.linux.vbird.org/linux_basic/0110whatislinux_1.php">鸟哥的Linux私房菜</a>  </p></li></ul><h3 id="配置F5自动运行"><a href="#配置F5自动运行" class="headerlink" title="配置F5自动运行~"></a>配置F5自动运行~</h3><h4 id="launch-json编写"><a href="#launch-json编写" class="headerlink" title="　launch.json编写"></a>　launch.json编写</h4><ul><li>这是window的  <pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;(gdb) Launch&quot;</span>,        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,        <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,        <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,        <span class="hljs-attr">&quot;args&quot;</span>: [            <span class="hljs-string">&quot;/K&quot;</span>,            <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,            <span class="hljs-string">&quot;&amp;&quot;</span>,            <span class="hljs-string">&quot;echo.&quot;</span>,            <span class="hljs-string">&quot;&amp;&quot;</span>,            <span class="hljs-string">&quot;pause&quot;</span>        ],        <span class="hljs-attr">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,        <span class="hljs-attr">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,        &quot;miDebuggerPath&quot;: &quot;盘符:/修改为自己的MinGW安装路径/gdb.exe&quot;,    （记得修改他）        &quot;setupCommands&quot;: [            &#123;                <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span>,                <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,                <span class="hljs-attr">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>            &#125;        ],        &quot;preLaunchTask&quot;: &quot;Build&quot;//要和task.json中的label标签一致    &#125;,      ]&#125;</code></pre></li><li><h4 id="然后是tasks-json"><a href="#然后是tasks-json" class="headerlink" title="　然后是tasks.json"></a>　然后是tasks.json</h4><pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,//一定要注意和launch.json中的prelaunchtask内容一致            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;g++&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;-Wall&quot;</span>,                <span class="hljs-string">&quot;-std=c++11&quot;</span>,                <span class="hljs-string">&quot;-lm&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>            ],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;echo&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: &#123;                <span class="hljs-string">&quot;owner&quot;</span>: <span class="hljs-string">&quot;cpp&quot;</span>,                <span class="hljs-string">&quot;fileLocation&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,                <span class="hljs-string">&quot;pattern&quot;</span>: &#123;                    <span class="hljs-string">&quot;regexp&quot;</span>: <span class="hljs-string">&quot;^(.*):(\\d+):(\\d+):\\s+(error):\\s+(.*)$&quot;</span>,                    <span class="hljs-string">&quot;file&quot;</span>: 1,                    <span class="hljs-string">&quot;line&quot;</span>: 2,                    <span class="hljs-string">&quot;column&quot;</span>: 3,                    <span class="hljs-string">&quot;severity&quot;</span>: 4,                    <span class="hljs-string">&quot;message&quot;</span>: 5                &#125;            &#125;        &#125;,        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Run&quot;</span>,            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-string">&quot;dependsOn&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: [],            <span class="hljs-string">&quot;group&quot;</span>: &#123;                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　当然以上文件其实也可以直接使用vscode自动生成的，只要修改了对应的文件路径就可以了。<del>此处只是放上了我的配置，理论上直接套用没有问题，实际没有测试过（逃）<br>~</del><br>　　实际测试下来，总是会有一些奇奇怪怪的不能够完全运行的结果。但是至少能够编译了不是？　　</li><li>Linux的<br>　　其实也不难，修改中文的路径为对应的GDB路径就行了，此处不再粘贴代码<br>算了，我还是粘贴一段吧(launch.json)<pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-attr">&quot;configurations&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;g++ - 生成和调试活动文件&quot;</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>,            <span class="hljs-attr">&quot;args&quot;</span>: [],            <span class="hljs-attr">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,            <span class="hljs-attr">&quot;environment&quot;</span>: [],            <span class="hljs-attr">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,            <span class="hljs-attr">&quot;setupCommands&quot;</span>: [                &#123;                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span>,                    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>                &#125;            ],            <span class="hljs-attr">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span>         &#125;    ]&#125;</code></pre>然后是task.json<pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;/usr/bin/g++&quot;</span>,            <span class="hljs-attr">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>            ],            <span class="hljs-attr">&quot;options&quot;</span>: &#123;                <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span>            &#125;,            <span class="hljs-attr">&quot;problemMatcher&quot;</span>: [                <span class="hljs-string">&quot;$gcc&quot;</span>            ],            <span class="hljs-attr">&quot;group&quot;</span>: &#123;                <span class="hljs-attr">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,                <span class="hljs-attr">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　这个就不管他gdb的位置了，反正都是错不了的。应该吧……</li></ul><h2 id="插件拓展"><a href="#插件拓展" class="headerlink" title="插件拓展"></a>插件拓展</h2><p><font size="3"> 　插件啊，看得见左侧那个小玩意不</font></p><center>不出意外的话点击左侧工具栏最底下的那个像微软徽标的四个“小框框”就是了。</center>  <p><em>以下插件仅是我个人推荐</em></p><h3 id="1-C-Intelligence"><a href="#1-C-Intelligence" class="headerlink" title="　1.C++ Intelligence"></a>　1.C++ Intelligence</h3><center><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcToK7QWvWNkTKH_PBsAqnWcOib9eOUenJhMwQ&usqp=CAU"><p><font size="4">　　没错，就是这个图标的玩意。如果是学习配置C++的话，这个即便你不去找，vscode也会自动为你推荐这个插件。通常来说不用慌找不到。</font><br>  <font size="0">  　　<em><del>其实作者自己也没有什么使用感受，它有什么用</del></em> （误）<br></font></center></p><h3 id="2-Chinese-Simplified"><a href="#2-Chinese-Simplified" class="headerlink" title="　2.Chinese (Simplified)"></a>　2.Chinese (Simplified)</h3><p>　　我相信一开始打开Vscode的同学都是崩溃的，特别是英语水平不怎么样的。那么这个插件就是救星。</p><center>  <img src='https://ae04.alicdn.com/kf/H9b29c9f660f44b11a77406cc21a40363t.jpg'></center>　　安装好了以后，重启一下VsCode就完成了<h3 id="3-GBK-To-UTF8"><a href="#3-GBK-To-UTF8" class="headerlink" title="　3.GBK To UTF8"></a>　3.GBK To UTF8</h3><p>  　　如果在c++文件中有中文字符，你可能会看见保存之前所有中文字符的地方变成乱码了，这个时候，就需要他来救驾。当然反过来的设计似乎还没有，要是想要能够在CMD中正确输出，建议再打码开始之前就是修改字符编码方式为“GBK”</p><h3 id="4-vscode-icons"><a href="#4-vscode-icons" class="headerlink" title="　4.vscode-icons"></a>　4.vscode-icons</h3><p>　　没啥，就是我一直在使用的图标包，其实是挺好看的。具体的使用方法在其官网和上已经写的非常清楚了，点击<a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">这里</a>前往</p><h3 id="5-C-C-GUN-global"><a href="#5-C-C-GUN-global" class="headerlink" title="　5.C/C++ GUN global"></a>　5.C/C++ GUN global</h3><p>　　提升你代码效率的好帮手，能够快速定位到函数、变量的声明区。同时在打码的时候还可以自动提示当前类有什么成员函数、成员变量。<a href="https://marketplace.visualstudio.com/items?itemName=jaycetyle.vscode-gnu-global">这里</a>是关于它的详细说明。</p><p><font size='0'><center>图先欠着</center></font></p><h3 id="6-GlassIt-VSC"><a href="#6-GlassIt-VSC" class="headerlink" title="　6.GlassIt-VSC"></a>　6.GlassIt-VSC</h3><p>　　让你的vscode透明，其实就是一个美化插件啦，要注意一件事情，就是安装好了之后，vscode会一直提醒你软件损坏，需要重新安装，其实是没毛病的，不要慌。这是为了美化（折腾）必须要经历的事情。vscode升级之后美化会继续存在，提示也会消失，插件也会不见，不知道是什么原因。</p><p>  补充一个链接：<a href="https://marketplace.visualstudio.com/items?itemName=s-nlf-fh.glassit">在这里，不用找了</a>，最好的方法当然是在Vscode中找，能够直接安装上去，减少debug时间。</p><h3 id="7-background"><a href="#7-background" class="headerlink" title="　7.background"></a>　7.background</h3><p>　　话不多说，直接上图，都是<a href="https://marketplace.visualstudio.com/items?itemName=shalldie.background">老二刺螈</a>了<br>  <center><img src='https://user-images.githubusercontent.com/9987486/40583705-7105dda8-61c6-11e8-935a-3c5d475a1eb1.gif'></center></p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>　　VsCode的更高阶用法应该还是在linux上，Windows10为我们提供了好用的WSL子系统，VsCode上同样也有合适的插件启用它。不过因为各种不可抗力的原因阻挡，在windows10上表现良好的VsCode在WSL上十分拉胯，比如输入一行的自动格式化，总是比windows系统上慢，同样的代码补全机制，在WSL上C/C++ GUN global总是会不能够正常的运行。还是希望有高人已经解决，能提交一篇解决的文章最好了。</p><center><font size='0'><p><em><del>这个坑什么时候填我也不知道</del></em>(不是)<br>最后更新时间：2020年11月16日19:01:12</p><p></font></center></p>]]></content>
    
    
    
    <tags>
      
      <tag>help</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/peachskin/2020/10/01/hello-world/"/>
    <url>/peachskin/2020/10/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="建立新的博客页"><a href="#建立新的博客页" class="headerlink" title="建立新的博客页"></a>建立新的博客页</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="在本地查看运行效果"><a href="#在本地查看运行效果" class="headerlink" title="在本地查看运行效果"></a>在本地查看运行效果</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code class="hljs bash">$ hexo generate$ sudo rm -rf ~/*</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署上去"><a href="#部署上去" class="headerlink" title="部署上去"></a>部署上去</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>just soso</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
