<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Huffman</title>
    <link href="/peachskin/2020/10/25/Huffman/"/>
    <url>/peachskin/2020/10/25/Huffman/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>使用Huffman编码实现一个压缩和解压缩软件</font></center>  <h2 id="初识Huffman"><a href="#初识Huffman" class="headerlink" title="初识Huffman"></a>初识Huffman</h2><p>　　简单说明一下Huffman编码的原理<br>  　　实现霍夫曼编码的方式主要是创建一个二叉树和其节点。这些树的节点可以存储在数组里，数组的大小为符号（symbols）数的大小n，而节点分别是终端节点（叶节点）与非终端节点（内部节点）。</p><p>　　一开始，所有的节点都是终端节点，节点内有三个字段：</p><p>　　1.符号（Symbol）</p><p>　　2.权重（Weight、Probabilities、Frequency）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　而非终端节点内有四个字段：</p><p>　　1.权重（Weight、Probabilities、Frequency）</p><p>　　2.指向两个子节点的 链接（Links to two child node）</p><p>　　3.指向父节点的链接（Link to its parent node）</p><p>　　基本上，我们用’0’与’1’分别代表指向左子节点与右子节点，最后为完成的二叉树共有n个终端节点与n-1个非终端节点，去除了不必要的符号并产生最佳的编码长度。</p><p>　　过程中，每个终端节点都包含着一个权重（Weight、Probabilities、Frequency），两两终端节点结合会产生一个新节点，新节点的权重是由两个权重最小的终端节点权重之总和，并持续进行此过程直到只剩下一个节点为止。</p><p>　　实现霍夫曼树的方式有很多种，可以使用优先队列（Priority Queue）简单达成这个过程，给与权重较低的符号较高的优先级（Priority），算法如下：</p><p>　　⒈把n个终端节点加入优先队列，则n个节点都有一个优先权Pi，1 ≤ i ≤ n</p><p>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列中移除两个最小的Pi节点，即连续做两次remove（min（Pi）, Priority_Queue)<br>　　　⑵产生一个新节点，此节点为（1）之移除节点之父节点，而此节点的权重值为（1）两节点之权重和<br>　　　⑶把（2）产生之节点加入优先队列中<br>　　⒊最后在优先队列里的点为树的根节点（root）<br>　　<br>　　而此算法的时间复杂度（ Time Complexity）为O（n log n）；因为有n个终端节点，所以树总共有2n-1个节点，使用优先队列每个循环须O（log n）。</p><p>　　此外，有一个更快的方式使时间复杂度降至线性时间（Linear Time）O（n），就是使用两个队列（Queue）创件霍夫曼树。第一个队列用来存储n个符号（即n个终端节点）的权重，第二个队列用来存储两两权重的合（即非终端节点）。此法可保证第二个队列的前端（Front）权重永远都是最小值，且方法如下：</p><p>　　⒈把n个终端节点加入第一个队列（依照权重大小排列，最小在前端）<br>　<br>　　⒉如果队列内的节点数&gt;1，则：</p><p>　　　⑴从队列前端移除两个最低权重的节点<br>　　　⑵将（1）中移除的两个节点权重相加合成一个新节点<br>　　　⑶加入第二个队列<br>　　⒊最后在第一个队列的节点为根节点</p><p>　　虽然使用此方法比使用优先队列的时间复杂度还低，但是注意此法的第1项，节点必须依照权重大小加入队列中，如果节点加入顺序不按大小，则需要经过排序，则至少花了O（n log n）的时间复杂度计算。</p><p>　　但是在不同的状况考量下，时间复杂度并非是最重要的，如果我们今天考虑英文字母的出现频率，变量n就是英文字母的26个字母，则使用哪一种算法时间复杂度都不会影响很大，因为n不是一笔庞大的数字。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li><h3 id="关于Huffman节点的定义"><a href="#关于Huffman节点的定义" class="headerlink" title="关于Huffman节点的定义"></a>关于Huffman节点的定义</h3><pre><code class="hljs code">struct Hufnode&#123;struct Hufnode *lc;&#x2F;&#x2F;左右子树    struct Hufnode *rc;    unsigned int pow;&#x2F;&#x2F;当前节点的权重    unsigned char Data;&#x2F;&#x2F;这个节点如果是叶子结点，了么存储对应的字符    bool leaf;&#x2F;&#x2F;标记是否是字符    string code;&#x2F;&#x2F;存储对应的Huffman编码    Hufnode() : lc(NULL), rc(NULL), leaf(true)&#x2F;&#x2F;初始化节点    &#123;    &#125;&#125;</code></pre><p>除此之外我们还需要实现一些节点赋值的操作符重载，方便赋值</p><pre><code class="hljs code">void operator&#x3D;(Hufnode *oth)&#x2F;&#x2F;重载等于号的意义非常重大&#123;    this-&gt;code &#x3D; oth-&gt;code;    this-&gt;Data &#x3D; oth-&gt;Data;    this-&gt;lc &#x3D; oth-&gt;lc;    this-&gt;pow &#x3D; oth-&gt;pow;    this-&gt;rc &#x3D; oth-&gt;rc;    this-&gt;leaf &#x3D; oth-&gt;leaf;&#125;operator Hufnode *()&#x2F;&#x2F;同样的，重载Hufnode到Hufnide*的意义重大&#123;    Hufnode *res &#x3D; new Hufnode;    res-&gt;Data &#x3D; this-&gt;Data;    res-&gt;pow &#x3D; this-&gt;pow;    res-&gt;code &#x3D; this-&gt;code;    res-&gt;lc &#x3D; this-&gt;lc;    res-&gt;leaf &#x3D; this-&gt;leaf;    res-&gt;rc &#x3D; this-&gt;rc;    return res;&#125;</code></pre></li><li><h3 id="实现Huffman树的构建"><a href="#实现Huffman树的构建" class="headerlink" title="实现Huffman树的构建"></a>实现Huffman树的构建</h3><p>　　根据开头介绍的两种方法，各有千秋，其中我们使用比较容易理解的方法，此处不使用优先队列等等优化性的算法，转向使用冒泡排序，因为排序的内容不算多，而且在第一次排序完成之后不会有较多的排序要求，我们可以通过对冒泡优化加快速度（使其变成一个插入算法）。<br>　　此处实现一个class类，负责实现Huffman树的构建和相关</p><pre><code class="hljs code">class Hufman&#123;private:    Hufnode * root&#x2F;&#x2F;记录下Huffman树的根节点        map&lt;unsigned char, string&gt; code_map&#x2F;&#x2F;用来快速访问字符对应的Huffman编码&#125;~~~  　然后我们需要实现一些相关的函数来完善这样一个Huffman类  ~~~code  Hufnode *return_root();  &#x2F;&#x2F;获得当前Huffman树的根节点unsigned int pow_len();    &#x2F;&#x2F;返回文件拥有的字符数量  string return_code(unsigned char c);&#x2F;&#x2F;根据字符返回对应的Huffman编码  void destroy(Hufnode *root);    &#x2F;&#x2F;递归调用，解构函数void build_huf(Hufnode data[], int size);&#x2F;&#x2F;构建Huffman树，输入的是节点数量和节点  void update_code(Hufnode *root, string fa, const char *c);&#x2F;&#x2F;根据建立的Huffman树，递归给每一个字符生成Huffman编码  void bob_sort(Hufnode data[], int size);&#x2F;&#x2F;优化过的冒泡排序</code></pre></li><li><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><p>　　<font size='4'>任务挺多，是需要单独实现的东西：  </font></p><ul><li>关于需要被压缩的文件读入，输出的文件格式；</li><li>读入字符统计不同字符出现的次数；</li><li>把编码后的文件写入到输出文件当中；</li><li>特殊情况处理：最后字符不是完整的字节<br><br/> &emsp;  <pre><code class="hljs code">void unzip(char *input, char *output)&#123;&#125;</code></pre></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>download</title>
    <link href="/peachskin/2020/10/11/download/"/>
    <url>/peachskin/2020/10/11/download/</url>
    
    <content type="html"><![CDATA[<center><font size='8'>就算是摸鱼也要好好的摸</font></center><h2 id="好软推荐"><a href="#好软推荐" class="headerlink" title="好软推荐"></a>好软推荐</h2><ul><li><p>一个好使的图片浏览器：<a href="https://tw.bandisoft.com/honeyview/">honeyview</a><br>　　<font size='3'>烦恼微软家自带的图片浏览器难用？苦于自带的图片浏览器打开速度总是捉急？那么它必然是一个好选择。</font></p></li><li><p>文件资源浏览器推荐：<a href="http://qttabbar.sourceforge.net/">QTTabBar</a><br>　　虽然不是很好看，甚至可以说加的内容还有一些丑陋，但是就那一点能够支持新建标签页，我就觉得比自带的文件浏览器好使。至少不用再很多个不知道所以的窗口中寻寻觅觅，最最最重要的是支持在此处打开CMD，这实在是好使。</p></li><li><p>软件卸载器：<a href="https://www.iobit.com/en/index.php">IOBit Uninstall</a><br>　　还是弥补自带的软件卸载的不足，自带的能卸载软件，对！就是能够卸载软件，至于软件留下来的数据，抱歉一概不会删除。这个时候就需要请出来它。对了有些时候并不是所有的都软件卸载都需要清理数据文件，还是在清理之前好做思考。除此之外就是普通版本已经足够普通人日常使用，没有加钱上专业版的必要（当然是可以去支持一下的啦~）</p></li><li><p>重装系统的工具：<a href="http://www.wepe.com.cn/">微PE</a><br>　　重装系统当然推荐，虽然现在有点变化，开始收费了。但是至少不流氓，而且收费也不算太贵，其实吧，就算买一个软碟通也不见得能够有多少便宜（支持一下良心开发者呗）。有了它，从此之后获得一U在手，天下我有；打开女生宿舍大门的万能钥匙；万能的工具人（误）等等称号</p></li><li><p>宇宙最强IDE：<a href="https://peach-water.github.io/peachskin/2020/10/11/vscode/">VsCode</a>  </p></li><li><p>美化桌面的方法：<a href="https://www.rainmeter.net/">Rainmeter</a><br>　　能够做到什么样子完全看自己折腾能力，最好当然是自己慢慢设计~<br>　　建议搭配贴吧上一个<a href="http://tieba.baidu.com/p/2085771413?see_lz=1">资源帖子</a>实现</p></li><li></li></ul><h2 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h2><ul><li>GARHUB，全球最大的代码交流平台：<a href="https://github.com/">Github</a>  </li><li>桌面美化教程资源：<a href="https://zhutix.com/tag/10s/">致美化</a>  </li><li></li></ul><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><center><font size = '0'>最后更新时间2020年10月25日22:24</font></center>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode</title>
    <link href="/peachskin/2020/10/11/vscode/"/>
    <url>/peachskin/2020/10/11/vscode/</url>
    
    <content type="html"><![CDATA[<center><font size='6'>如何让VsCode编写C++/C代码更加高效</font></center><center><font size='0'>就是折腾+摸鱼+折腾</font></center><hr><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="下载安装VsCode"><a href="#下载安装VsCode" class="headerlink" title="下载安装VsCode"></a>下载安装VsCode</h3><p>　　从微软家里搞来一个VsCode的安装包应该不会很难吧、不会吧不会吧…………</p><center> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSMdYGzeQqSW5fcbollGfBqCjs5o0IJ0MIYyg&usqp=CAU" width="70"><p>好吧，还是挂上<a href="https://code.visualstudio.com/">链接</a>好了。</p></center>  <p>　　下载好安装包，同意条款，一路直走下一步， 这里没有什么东西可以讲述的，主要就是最后一步，这个一定要点上，不然出什么奇奇怪怪的问题，我也不知道。怎么修复合适，也许<a href="https://www.baidu.com/">这里</a>知道怎么修复你的问题，或者是<a href="https://www.google.com/">这里</a>. </p><p>　　算了，我还是选择手把手一下吧。<br> <center></p><img src="https://pic2.zhimg.com/80/v2-6999967dc8d4d3438879fd15ccaca8e5_720w.jpg">  <p>然后选择一个安装位置。我觉得这玩意自己喜欢就好了，装哪里都可以。</p><img src="https://pic2.zhimg.com/80/v2-55cb90244dcee54ddc961dacf9f3b06d_720w.jpg">  <p>我相信需要这个软件的人一定都不是什么电脑小白吧。不会吧不会吧~  </p> <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS3j-UQXtTp5DsqUi829BjjjfkyGcpILITS-Q&usqp=CAU" width="450" height="350" >  <p>  <font size='00'>这是一张很模糊的图片，就不要吐槽了 </font></center><br>　　如果还是出现了什么莫名其妙的问题，请点击<a href="https://www.baidu.com/">这里</a>。我相信这里一定能解决你所有问题</center>  </p><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li><h4 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h4>　　在Windows环境下推荐<a href="http://www.mingw.org/">MinGW</a><br><font size='6'><font color="red"><br>　　一定要重启<br>　　一定要重启<br>　　一定要重启<br>　　重要的事情说3遍  </font></font><br>　　安装完成之后，还需要添加到系统的环境变量，重启之后才能起作用。<br>　　检验GCC编译器是否安装正确。打开命令行(点击开始菜单 -&gt; 运行，输入cmd.exe后确定)<pre><code class="hljs cmd"><span class="hljs-number">1</span> | gcc -v</code></pre></li></ul><p>　　如果能够看到GCC的版本信息，那么恭喜你安装完成，如果没有，请点击<a href="https://www.baidu.com/">这里</a>。此处选用的是一个开源项目，在<a href="https://link.zhihu.com/?target=https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">sourceforge的mingw</a>，下载x64的版本，可以直接打开进行安装。这里是我的选择：版本选择最新的版本，（PS：如果是linux一定要选择poisx）,32位的电脑就选择x86，64位电脑就选择x64，最后一项只能选择“0”。</p><center><img src="https://pic1.zhimg.com/80/v2-3aae1eb09e5b78b306706ee3ed8693ac_720w.jpg"></center>  <p>　　这里在选择安装位置的时候记得要避开中文路径和中文字符的路径。  </p><center><img src="https://pic3.zhimg.com/80/v2-ccdc30f87b6ebcd77858122300c7c04a_720w.jpg"></center>  <ul><li><h4 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h4><p>　　这个的话就很好办了，打开终端ctrl ＋ Alt + T，输入命令  </p><pre><code class="hljs bash">$ sudo apt update$ sudo apt install gcc$ sudo apt install g++                       PS:有些时候不会自己安装上G++进而出现C++编译不了就难顶(通常不太会)</code></pre><p>　　等待安装完成，同样可以在终端输入</p><pre><code class="hljs bash">$ gcc -v</code></pre><p>　　检查安装是否完成  </p></li><li><p>其实在window上也可以使用上面的方法<br>　　首先你需要准备好一个<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL</a>，之后的安装方法和linux上一样。算了，还是找到了一篇安装<a href="https://www.jianshu.com/p/3e627ff45ccb">教程</a><br>　　然后在vscode上安装插件<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">Remote-WSL</a>，还是去VsCode的自带插件商店上去找吧。</p></li><li><p>关于GCC的发展史可以去看：<a href="http://cn.linux.vbird.org/linux_basic/0110whatislinux_1.php">鸟哥的Linux私房菜</a>  </p></li></ul><h3 id="配置F5自动运行"><a href="#配置F5自动运行" class="headerlink" title="配置F5自动运行~"></a>配置F5自动运行~</h3><h4 id="launch-json编写"><a href="#launch-json编写" class="headerlink" title="　launch.json编写"></a>　launch.json编写</h4><ul><li>这是window的  <pre><code class="hljs cmd">&#123;    &quot;version&quot;: &quot;<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;(Windows) 启动&quot;,            &quot;<span class="hljs-built_in">type</span>&quot;: &quot;cppvsdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,            &quot;args&quot;: [                &quot;/K&quot;,                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,                &quot;&amp;&quot;,                &quot;<span class="hljs-built_in">echo</span>.&quot;,                &quot;&amp;&quot;,                &quot;<span class="hljs-built_in">pause</span>&quot;            ],            &quot;stopAtEntry&quot;: false,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: false        &#125;,        &#123;        &quot;name&quot;: &quot;(gdb) Launch&quot;,        &quot;<span class="hljs-built_in">type</span>&quot;: &quot;cppdbg&quot;,        &quot;request&quot;: &quot;launch&quot;,        &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,        &quot;args&quot;: [            &quot;/K&quot;,            &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,            &quot;&amp;&quot;,            &quot;<span class="hljs-built_in">echo</span>.&quot;,            &quot;&amp;&quot;,            &quot;<span class="hljs-built_in">pause</span>&quot;        ],        &quot;stopAtEntry&quot;: false,        &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,        &quot;externalConsole&quot;: false,        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;盘符:/修改为自己的MinGW安装路径/gdb.exe&quot;,    （记得修改他）        &quot;setupCommands&quot;: [            &#123;                &quot;description&quot;: &quot;Enable pretty-printing <span class="hljs-keyword">for</span> gdb&quot;,                &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                &quot;ignoreFailures&quot;: true            &#125;        ],        &quot;preLaunchTask&quot;: &quot;Build&quot;    &#125;,      ]&#125;</code></pre></li><li><h4 id="然后是tasks-json"><a href="#然后是tasks-json" class="headerlink" title="　然后是tasks.json"></a>　然后是tasks.json</h4><pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;g++&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;-Wall&quot;</span>,                <span class="hljs-string">&quot;-std=c++11&quot;</span>,                <span class="hljs-string">&quot;-lm&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>            ],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;echo&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: &#123;                <span class="hljs-string">&quot;owner&quot;</span>: <span class="hljs-string">&quot;cpp&quot;</span>,                <span class="hljs-string">&quot;fileLocation&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,                <span class="hljs-string">&quot;pattern&quot;</span>: &#123;                    <span class="hljs-string">&quot;regexp&quot;</span>: <span class="hljs-string">&quot;^(.*):(\\d+):(\\d+):\\s+(error):\\s+(.*)$&quot;</span>,                    <span class="hljs-string">&quot;file&quot;</span>: 1,                    <span class="hljs-string">&quot;line&quot;</span>: 2,                    <span class="hljs-string">&quot;column&quot;</span>: 3,                    <span class="hljs-string">&quot;severity&quot;</span>: 4,                    <span class="hljs-string">&quot;message&quot;</span>: 5                &#125;            &#125;        &#125;,        &#123;            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;Run&quot;</span>,            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-string">&quot;dependsOn&quot;</span>: <span class="hljs-string">&quot;Build&quot;</span>,            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>.exe&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [],            <span class="hljs-string">&quot;presentation&quot;</span>: &#123;                <span class="hljs-string">&quot;reveal&quot;</span>: <span class="hljs-string">&quot;always&quot;</span>,                <span class="hljs-string">&quot;focus&quot;</span>: <span class="hljs-literal">true</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: [],            <span class="hljs-string">&quot;group&quot;</span>: &#123;                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　当然以上文件其实也可以直接使用vscode自动生成的，只要修改了对应的文件路径就可以了。<del>此处只是放上了我的配置，理论上直接套用没有问题，实际没有测试过（逃）</del><br>实际测试下来，总是会有一些奇奇怪怪的不能够完全运行的结果。但是至少能够编译了不是？</li><li>Linux的<br>　　其实也不难，修改中文的路径为对应的GDB路径就行了，此处不再粘贴代码<br>算了，我还是粘贴一段吧(launch.json)<pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,    <span class="hljs-string">&quot;configurations&quot;</span>: [        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;g++ - 生成和调试活动文件&quot;</span>,            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cppdbg&quot;</span>,            <span class="hljs-string">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,            <span class="hljs-string">&quot;program&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [],            <span class="hljs-string">&quot;stopAtEntry&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspaceFolder&#125;</span>&quot;</span>,            <span class="hljs-string">&quot;environment&quot;</span>: [],            <span class="hljs-string">&quot;externalConsole&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;MIMode&quot;</span>: <span class="hljs-string">&quot;gdb&quot;</span>,            <span class="hljs-string">&quot;setupCommands&quot;</span>: [                &#123;                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span>,                    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span>,                    <span class="hljs-string">&quot;ignoreFailures&quot;</span>: <span class="hljs-literal">true</span>                &#125;            ],            <span class="hljs-string">&quot;preLaunchTask&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-string">&quot;miDebuggerPath&quot;</span>: <span class="hljs-string">&quot;/usr/bin/gdb&quot;</span>        &#125;    ]&#125;</code></pre>然后是task.json<pre><code class="hljs bash">&#123;    <span class="hljs-string">&quot;tasks&quot;</span>: [        &#123;            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;shell&quot;</span>,            <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;C/C++: g++ build active file&quot;</span>,            <span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;/usr/bin/g++&quot;</span>,            <span class="hljs-string">&quot;args&quot;</span>: [                <span class="hljs-string">&quot;-g&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span>,                <span class="hljs-string">&quot;-o&quot;</span>,                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fileDirname&#125;</span>/<span class="hljs-variable">$&#123;fileBasenameNoExtension&#125;</span>&quot;</span>            ],            <span class="hljs-string">&quot;options&quot;</span>: &#123;                <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;workspaceFolder&#125;</span>&quot;</span>            &#125;,            <span class="hljs-string">&quot;problemMatcher&quot;</span>: [                <span class="hljs-string">&quot;<span class="hljs-variable">$gcc</span>&quot;</span>            ],            <span class="hljs-string">&quot;group&quot;</span>: &#123;                <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,                <span class="hljs-string">&quot;isDefault&quot;</span>: <span class="hljs-literal">true</span>            &#125;        &#125;    ],    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;2.0.0&quot;</span>&#125;</code></pre>　　这个就不管他gdb的位置了，反正都是错不了的。应该吧……</li></ul><h2 id="插件拓展"><a href="#插件拓展" class="headerlink" title="插件拓展"></a>插件拓展</h2><p><font size="3"> 　插件啊，看得见左侧那个小玩意不</font></p><center><img src="https://sc03.alicdn.com/kf/H4dd02d6622ee4b53b54d92b9c167fd72i.jpg">  </center>　*以下插件仅是我个人推荐*<h3 id="1-C-Intelligence"><a href="#1-C-Intelligence" class="headerlink" title="　1.C++ Intelligence"></a>　1.C++ Intelligence</h3><center><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcToK7QWvWNkTKH_PBsAqnWcOib9eOUenJhMwQ&usqp=CAU"><p><font size="4">　　没错，就是这个图标的玩意。</font><br>  <font size="0">  　　<em><del>其实作者自己也没有什么使用感受，它有什么用</del></em> （误）<br></font></center></p><h3 id="2-Chinese-Simplified"><a href="#2-Chinese-Simplified" class="headerlink" title="　2.Chinese (Simplified)"></a>　2.Chinese (Simplified)</h3><p>　　我相信一开始打开Vscode的同学都是类型崩溃的，尤其是新手，英语水平并不是很好。那么这个插件就必须要上啦。</p><center>  <img src='https://ae04.alicdn.com/kf/H9b29c9f660f44b11a77406cc21a40363t.jpg'></center>　　安装好了以后，重启一下VsCode就完成了<h3 id="3-GBK-To-UTF8"><a href="#3-GBK-To-UTF8" class="headerlink" title="　3.GBK To UTF8"></a>　3.GBK To UTF8</h3><p>  　　如果在c++文件中有中文字符，你可能会看见保存之前所有中文字符的地方变成乱码了，这个时候，就需要他来救驾。当然反过来的设计似乎还没有，要是想要能够在CMD中正确输出，建议再打码开始之前就是修改字符编码方式为“GBK”</p><h3 id="4-vscode-icons"><a href="#4-vscode-icons" class="headerlink" title="　4.vscode-icons"></a>　4.vscode-icons</h3><p>　　没啥，就是我一直在使用的图标包，其实是挺好看的。具体的使用方法在其官网和上已经写的非常清楚了，点击<a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">这里</a>前往</p><h3 id="5-C-C-GUN-global"><a href="#5-C-C-GUN-global" class="headerlink" title="　5.C/C++ GUN global"></a>　5.C/C++ GUN global</h3><p>　　提升你代码效率的好帮手，能够快速定位到函数、变量的声明区。同时在打码的时候还可以自动提示当前类有什么成员函数、成员变量。<a href="https://marketplace.visualstudio.com/items?itemName=jaycetyle.vscode-gnu-global">这里</a>是关于它的详细说明。</p><p><font size='0'><center>图先欠着</center></font></p><h3 id="6-GlassIt-VSC"><a href="#6-GlassIt-VSC" class="headerlink" title="　6.GlassIt-VSC"></a>　6.GlassIt-VSC</h3><p>　　让你的vscode透明，其实就是一个美化插件啦，要注意一件事情，就是安装好了之后，vscode会一直提醒你软件损坏，需要重新安装，其实是没毛病的，不要慌。这是为了美化（折腾）必须要经历的事情。</p><p>  补充一个链接：<a href="https://marketplace.visualstudio.com/items?itemName=s-nlf-fh.glassit">在这里，不用找了</a></p><h3 id="7-background"><a href="#7-background" class="headerlink" title="　7.background"></a>　7.background</h3><p>　　话不多说，直接上图，都是<a href="https://marketplace.visualstudio.com/items?itemName=shalldie.background">老二刺螈</a>了<br>  <center><img src='https://user-images.githubusercontent.com/9987486/40583705-7105dda8-61c6-11e8-935a-3c5d475a1eb1.gif'></center></p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>　　VsCode的更高阶用法应该还是在linux上，Windows10为我们提供了好用的WSL子系统，VsCode上同样也有合适的插件启用它。不过因为各种不可抗力的原因阻挡，在windows10上表现良好的VsCode在WSL上十分拉胯，比如输入一行的自动格式化，总是比windows系统上慢，同样的代码补全机制，在WSL上C/C++ GUN global总是会不能够正常的运行。还是希望有高人已经解决，能提交一篇解决的文章最好了。</p><center><font size='0'><p><em><del>这个坑什么时候填我也不知道</del></em>(不是)<br>最后更新时间：2020年10月11日19:01:12</p><p></font></center></p>]]></content>
    
    
    
    <tags>
      
      <tag>推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/peachskin/2020/10/07/hello-world/"/>
    <url>/peachskin/2020/10/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="建立新的博客页"><a href="#建立新的博客页" class="headerlink" title="建立新的博客页"></a>建立新的博客页</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="在本地查看运行效果"><a href="#在本地查看运行效果" class="headerlink" title="在本地查看运行效果"></a>在本地查看运行效果</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code class="hljs bash">$ hexo generate$ sudo rm -rf ~/*</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署上去"><a href="#部署上去" class="headerlink" title="部署上去"></a>部署上去</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
